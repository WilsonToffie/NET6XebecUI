@page "/forgotpassword"
@inject NavigationManager navmanager
@inject HttpClient HttpClient
@using System.Linq;
@using XebecPortal.UI.Shared.Home.Models
@inject UserState state
@inject IJSRuntime JSRuntime

<style>
    
    .overlay-login {
        height: 90vh;
        width: 100%;
    }

    .login-page {
        height: 90vh;
        width: 60%;
        display: flex;
        margin-left: 20%;
        margin-right: 20%;
    }

    .login-left {
        height: 70vh;
        width: 40%;
        margin-top: 10vh;
        background-color: white;
    }

    .login-right {
        height: 70vh;
        width: 60%;
        margin-top: 10vh;
        background-size: cover;
        background-position: center;
        background-image: linear-gradient(rgba(0, 188, 174,0.2),rgba(0, 188, 174,0.2)),url(/Img/pexels1.jpg);
    }

    .index-form-heading {
        width: 100%;
        font-family: opensans-condensed-bold;
        text-align: center;
        opacity: 1;
        background-color: transparent;
        height: 10vh;
    }

    .index-form-login {
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
        margin-top: 10vh;
        height: auto;
    }

    .index-form-heading-1 {
        font-size: 3em;
        font-weight: 800;
        height: 10vh;
        line-height: 10vh;
        color: #004393;
        font-family: opensans-condensed-bold;
    }

    .index-form-group {
        width: 100%;
        display: flex;
        height: 7vh;
    }


    .index-group {
        border: solid #00bcae 0.2em;
        background-color: transparent;
        height: 7vh;
        width: 100%;
        border-radius: 1em;
    }

    .index-form-icon {
        width: 10%;
        padding-left: 5%;
        text-align: left;
        background-color: transparent;
        color: #00bcae;
        font-size: 1.5em;
        height: 7vh;
        line-height: 7vh;
    }

    input[type="text"], input[type="email"], input[type="password"], select {
        background-color: transparent;
        width: 90%;
        height: 7vh;
        line-height: 7vh;
        font-size: 1em;
        border: none;
        font-weight: 800;
        color: black;
        font-family: opensans-condensed-light;
        padding: 1em 1em 1em 1em;
    }

        input:focus, textarea:focus, select:focus {
            outline: none;
        }

    ::placeholder {
        color: black;
        font-family: opensans-condensed-light;
        font-size: 1em;
        width: 100%;
        font-weight: 900;
    }

    .index-form-register {
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
        height: auto;
    }

    .index-form-heading-2 {
        font-size: 1.5em;
        font-weight: 700;
        color: #666666;
        height: 3vh;
    }

    .index-form-heading-3 {
        font-size: 0.8em;
        font-weight: 600;
        color: black;
        font-family: opensans-condensed-bold;
        height: 3vh;
    }

    .forgotpassword {
        color: rgba(0, 188, 174,1);
        width: 100%;
        text-align: right;
        height: 3vh;
        line-height: 3vh;
        font-size: 1em;
        margin-bottom: 0;
        padding-bottom: 0;
        cursor: pointer;
        font-family: 700;
        font-family: opensans-condensed-bold;
    }

        .forgotpassword:hover {
            color: #d35bc9;
            width: 100%;
            text-align: right;
            height: 3vh;
            font-size: 1em;
            font-weight: 800;
            margin-bottom: 0;
            padding-bottom: 0;
            cursor: pointer;
            font-family: opensans-condensed-light;
        }

    .login-button-div {
        height: 5vh;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    .index-form-button {
        background-color: rgba(0, 188, 174,1);
        color: white;
        width: 100px;
        height: 5vh;
        border: none;
        text-align: center;
        font-size: 1em;
        font-weight: 700;
        font-family: opensans-condensed-bold;
        font-weight: 600;
        border: none;
        border-radius: 1em;
    }

        .index-form-button:hover {
            background-color: #d35bc9;
        }

    .index-form-or {
        text-align: center;
        height: 3vh;
    }

    .index-form-socials {
        width: 100%;
        display: flex;
        height: 5vh;
    }

    .index-socialmedia-div {
        color: #00bcae;
        font-size: 2em;
        width: 20%;
        height: 5vh;
        margin-left: 13%;
    }

        .index-socialmedia-div:hover {
            color: #d35bc9;
            font-size: 2em;
            width: 20%;
            height: 5vh;
            margin-top: 0vh;
            margin-left: 13%;
        }

        .autofill-class{
        height: 6.3vh !important;
        margin-left: 10px;        
        border-top-right-radius: 0.8em;
        border-bottom-right-radius: 0.8em;
    }
</style>

<div class="overlay-login">
    <div class="login-page">
        <div class="login-left">
            <form class="index-form-login">
                @if (KeyForgotPasswordForm)
                {
                    <div class="form-group index-form-heading">
                        <h1 class="index-form-heading-1">ENTER KEY</h1>
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-at"></i>
                        </div>
                        <input class="autofill-class" type="text" placeholder="Email" @bind="@Email" @onfocusin="validationChanges" @ref="KeyElementInFocus">
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-key"></i>
                        </div>
                        <input type="text" placeholder="Key" @bind="@Key" @onfocusin="validationChanges">
                    </div>
                    <div class="form-group index-form-or">
                        @if (invalidKey)
                        {
                            <h3 class="index-form-heading-3">Invalid Key</h3>
                        }
                        @if (validKey)
                        {
                            <h3 class="index-form-heading-3">Valid Key</h3>
                        }
                        @if (SubmitPressed)
                        {
                            <h3 class="index-form-heading-3">Submit Pressed</h3>
                        }
                    </div>
                    <div class="form-group login-button-div">
                        <input type="button" class="index-form-button" @onclick="SubmitKey" value="Submit" />
                    </div>
                }

                @if (ForgotPasswordForm)
                {
                    <div class="form-group index-form-heading">
                        <h1 class="index-form-heading-1">RESET PASSWORD</h1>
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-lock "></i>
                        </div>
                        <input type="password" placeholder="Enter Password" @bind="@Password1" @onfocusin="validationChanges"  @ref="ResetElementInFocus">
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-lock "></i>
                        </div>
                        <input type="password" placeholder="Confirm Password" @bind="@Password2" @onfocusin="validationChanges">
                    </div>
                    <div class="form-group">
                        <h3 class="forgotpassword" @onclick="GoToKey">Back</h3>
                    </div>
                    <div class="form-group index-form-or">                        
                        @if (validReset)
                        {
                            <h3 class="index-form-heading-3">Successful Reset</h3>
                        }
                        @if (invalidReset)
                        {
                            <h3 class="index-form-heading-3">Unsuccessful Reset</h3>
                        }
                        @if (invalidPassword)
                        {
                            <h3 class="index-form-heading-3">Passwords do not match</h3>
                        }
                    </div>
                    <div class="form-group login-button-div">
                        <input type="button" class="index-form-button" @onclick="SubmitReset" value="Submit" />
                    </div>
                }
            </form>
        </div>
        <div class="login-right"></div>
    </div>
</div>

@code{

    // Sign In Form bind-values
    private string Email = "";
    private string Password = "";
    private string Password1 = "";
    private string Password2 = "";
    private string Key = "";

    // Validaion booleans
    private bool successfullLogin, invalidCredentials;
    private bool validEmail, invalidEmail;
    private bool validKey, invalidKey;
    private bool invalidPassword;
    private bool validReset, invalidReset;

    // View control booleans
    private bool LoginForm, EmailForgotPasswordForm, KeyForgotPasswordForm, ForgotPasswordForm;

    // Responses
    private bool SubmitPressed;
    private bool BackPressed;
    private string message = "";

    // Element References
    private ElementReference SignInElementInFocus, EmailElementInFocus, KeyElementInFocus, ResetElementInFocus;

    // Models
    private ForgotPasswordModel forgot = new ForgotPasswordModel();
    private UserModel user = new UserModel();

    protected override async Task OnInitializedAsync()
    {
        await GoToKey();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        @if (firstRender)
        {
            if (KeyForgotPasswordForm)
            {
                await KeyElementInFocus.FocusAsync();
            }
            else if (ForgotPasswordForm)
            {
                await ResetElementInFocus.FocusAsync();
            }
        }
    }

    private async Task GoToKey()
    {
        SubmitPressed = false;
        KeyForgotPasswordForm = true;
        LoginForm = EmailForgotPasswordForm = ForgotPasswordForm = false;
        await Task.Delay(0);
    }

    private async Task GoToForgotPassword()
    {
        SubmitPressed = false;
        ForgotPasswordForm = true;
        LoginForm = EmailForgotPasswordForm = KeyForgotPasswordForm = false;
        await Task.Delay(0);
    }

    private async Task SubmitKey()
    {
        SubmitPressed = true;
        user.Email = Email;
        user.UserKey = Key;

        using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/keyConfirm", user))
        {
            string res = await msg.Content.ReadAsStringAsync();
            if (msg.IsSuccessStatusCode)
            {
                if (res.Contains("true"))
                {
                    validKey = true;
                    invalidKey = SubmitPressed = false;
                    await GoToForgotPassword();
                }

                else
                {
                    invalidKey = true;
                    validKey = SubmitPressed = false;
                }
            }
        }
    }

    private async Task SubmitReset()
    {
        SubmitPressed = true;
        user.Email = Email;
        user.UserKey = null;

        bool validPassword = RegisterPasswordCheck();
        if (validPassword)
        {
            using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("auth/changepassword", user))
            {
                string res = await msg.Content.ReadAsStringAsync();
                if (msg.IsSuccessStatusCode)
                {
                    if (res.Contains("true"))
                    {
                        validReset = true;
                        SubmitPressed = invalidReset = false;
                        GoToLogin();
                    }
                    else
                    {
                        Console.WriteLine(res);
                        invalidReset = true;
                        SubmitPressed = validReset = false;
                    }
                }
            }

        }
        //else
        //{
        //    invalidReset = true;
        //    validReset = SubmitPressed = false;
        //}

    }

    private void validationChanges()
    {        
        SubmitPressed = false;
        invalidKey = false;
        validKey = false;
        validReset = false;
        invalidReset = false;
        invalidPassword = false;
        validEmail = false;
        invalidEmail = false;
    }

    private bool RegisterPasswordCheck()
    {
        if (Password1.Contains(Password2))
        {
            invalidPassword = false;
            user.Password = Password2;
            return true;

        }
        else
        {
            invalidPassword = true;
            invalidReset = false;
            return false;
        }

    }

    private void GoToHome()
    {
        navmanager.NavigateTo("home");
    }

    private void GoToLogin()
    {
        navmanager.NavigateTo("signin");
    }
}