@page "/myjobs"
@using XebecPortal.UI.Services.Models
@inject HttpClient httpClient
@inject UserState state
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>

    .main {
        overflow: hidden;
    }

    .main-wrapper {
        background: transparent;
        width: 100%;
        min-height: 100%;
        padding: 0 5%;
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 30px;
    }

    .search-panel, .heading, .line {
        grid-column: span 4;
        background: rgba(255,255,255,0.7);
        box-shadow: rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px;
    }

    .line {
        background: black;
    }

    .main-wrapper-child {
        border-radius: 10px;
        padding-top: 10px;
    }

    .job-cards {
        background: rgba(0, 188, 174,0.1);
        height: 70vh;
        gap: 10px;
        padding: 5px;
        display: flex;
        flex-direction: column;
        overflow-y: scroll;
        width: 100%;
    }

        .job-cards::-webkit-scrollbar {
            width: 10px !important;
            cursor: pointer !important;
            background: white !important;
            border-radius: 10px;
        }

        .job-cards::-webkit-scrollbar-thumb {
            background-color: #666666 !important;
            border-radius: 10px;
        }

            .job-cards::-webkit-scrollbar-thumb:hover {
                background-color: #666666 !important;
                cursor: pointer !important;
                border-radius: 10px;
            }



        .job-cards div {
            border: none;
            border-left: rgba(0, 188, 174,0.7) 10px solid;
            border-radius: 10px;
            background: rgba(255,255,255,0.9);
            margin: 0 5px 0 3px;
        }

            .job-cards div:first-child {
                background: rgba(0, 188, 174,1);
                border-radius: 5px;
                margin: 0;
                font-weight: 700;
                box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px !important;
            }

            .job-cards div.rejection {
                border-left: #ff4d5a 10px solid;
                box-shadow: rgba(253,139,151,0.3) 0px 2px 2px, rgba(253,139,151,0.01) 0px 15px 12px;
            }

        .job-cards .accepted {
            border-left: rgba(0, 188, 80, 1) 10px solid;
            box-shadow: rgba(253,139,151,0.3) 0px 2px 2px, rgba(253,139,151,0.01) 0px 15px 12px;
        }

        .job-cards div:first-child.rejection-heading {
            background: #ff4d5a;
            border: none !important;
        }

        .job-cards div:first-child.accepted-heading {
            background: rgba(0, 188, 80, 1);
            border: none !important;
        }

    .card-header {
        position: sticky;
        top: -5px;
        box-sizing: border-box;
        height: fit-content;
        transition: 0.3s fade;
    }

        .card-header .rejection-heading {
        }

    .job-card {
        display: flex;
        flex-direction: column;
        height: fit-content;
        box-shadow: rgba(0, 188, 174,0.3) 0px 2px 2px, rgba(0, 188, 174,0.22) 0px 15px 12px;
    }

    .position, .company {
        grid-column: span 2;
    }
    /* text and input: sizes and content placement*/
    .heading {
        width: fit-content;
        height: fit-content;
        justify-self: start;
        padding: 0 5%;
    }

        .heading h1 {
            color: #2d1c13;
            text-align: left;
            font-size: 3vw;
            font-weight: 900;
        }

        .heading small {
            color: rgba(0,0,0,0.39);
            text-transform: uppercase;
            font-size: 0.5vw;
        }



    .card-header {
        font-size: 20px;
        text-align: center;
        color: white;
        margin-bottom: 3vh;
        width: 100%;
        height: 35px;
    }

    .job-card {
        padding: 3px 5px;
    }

        .position, .company, .job-card small {
            text-overflow: ellipsis;
            word-wrap: break-word;
            display: block;
        }

    .position {
        font-size: 1.3vw;
        font-weight: 700;
    }

    .company {
        font-size: 1vw;
        font-weight: 500;
    }

    .job-card small {
        font-size: 0.6vw;
    }

    .addition-details {
        margin-left: 3px;
    }

    .left-text {
        text-align: end;
        margin-right: 5px;
    }


    .phase-pill, .rejection-phase {
        border-radius: 999px;
        box-sizing: border-box;
        cursor: pointer;
        width: fit-content;
        word-break: break-word;
        border: 0;
    }

    .rejection-phase {
        color: rgba(188, 0, 14, 1);
        background: rgba(188, 0, 14, 0.33);
        font-size: 1vh;
        font-weight: 700;
        opacity: 1;
        padding: 0.2vh 1vh;
    }

    .phase-pill {
        background: rgba(94,93,240,0.22);
        color: rgb(94,93,240);
        font-size: 1.5vh;
        font-weight: 700;
        opacity: 1;
        padding: 0.2vh 1vh;
    }

    .count {
        text-decoration: none;
        border-radius: 1em;
        font-size: 1em;
    }

    .job-search-bar-input {
        background-color: white;
        height: 5vh;
        width: 100%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 rgba(0,0,0,0.2);
        border: white solid 0.1em;
        border-radius: 1em;
    }

    .search-image {
        padding-left: 1em;
        background: url(/Img/search.svg) no-repeat left;
        background-size: 30px;
    }

    .hr-job-search-bar-input {
        padding-left: 3em;
        background-color: white;
        height: 6vh;
        width: 100%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 rgba(0,0,0,0.2);
        border: white solid 0.1em;
        border-radius: 1.5em;
    }



        .hr-job-search-bar-input::placeholder {
            color: #666666;
            font-family: opensans-condensed-bold;
        }



        .hr-job-search-bar-input:hover {
            border-radius: 1em;
            border: 0.1em solid black;
        }

    .myjob-search-bar {
        width: 40%;
        height: 5vh;
        margin-bottom: 2.5vh;
        margin-top: 2.5vh;
        margin-left: 30%;
        margin-right: 30%;
    }
</style>


@if (jobs != null)
{
    FindApplications();
    <div class="search-wrapper-container" style=" width: 40%; left: 30%;">
        <input class="search-bar-input" placeholder="Search For Jobs" type="text" @oninput="SearchApplications" />
        <img class="search-bar-pic" src="/Img/search.svg"/>
    </div>

    <div class="main-wrapper">


        <!--Applications-->
        <div class="main-wrapper-child job-cards">
            <div class="card-header d-flex align-content-center justify-content-center ">
                <span>Application</span>
            </div>
            @foreach (var application in applications)
            {
                Job currentJob = null;

                @if (jobsFiltered == null || searchCandidate == "" || searchCandidate == " ")
                {
                    currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
                }
                else if (jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault() != null)
                {
                    currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
                }

                ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

                @if (currentPhase.description.ToLower() == "applied" && currentJob != null)
                {
                    <div class="job-card">
                        <span class="position">@currentJob.Title</span>
                        <span class="company">@currentJob.Company.Name</span>
                        <small class="addition-details text-muted">@currentJob.Location.Name</small>
                        <small class="phase left-text">
                            <span class="phase-pill" style="@(GetColor(currentPhase.description))">@currentPhase.description</span>
                        </small>
                        <small class="addition-details text-muted">Date Advertised: @currentJob.CreationDate.ToString("MM/dd/yyyy")</small>
                    </div>
                }
            }
        </div>


        <!--In Progress-->
        <div class="main-wrapper-child job-cards">
            <div class="card-header  d-flex align-content-center justify-content-center">
                <span>In Progress</span>
            </div>
            @foreach (var application in applications)
            {
                Job currentJob = null;

                @if (jobsFiltered == null || searchCandidate == "" || searchCandidate == " ")
                {
                    currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
                }
                else if (jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault() != null)
                {
                    currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
                }

                ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

                @if (currentPhase.description.ToLower() != "rejected" && currentPhase.description.ToLower() != "hired" && !currentPhase.description.ToLower().Contains("final") && !currentPhase.description.ToLower().Contains("applied") && currentJob != null)
                {

                    <div class="job-card">
                        <span class="position">@currentJob.Title</span>
                        <span class="company">@currentJob.Company.Name</span>
                        <small class="addition-details text-muted">@currentJob.Location.Name</small>
                        <small class="phase left-text">
                            <span class="phase-pill" style="@(GetColor(currentPhase.description))">@currentPhase.description</span>
                        </small>
                        <small class="addition-details text-muted">Date Advertised: @currentJob.CreationDate.ToString("MM/dd/yyyy")</small>
                    </div>

                }
            }
        </div>
        @*Successful Application*@
        @foreach (var application in applications)
        {
            Job currentJob = null;

            @if (jobsFiltered == null || searchCandidate == "" || searchCandidate == " ")
            {
                currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
            }
            else if (jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault() != null)
            {
                currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
            }

            ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

            @if (currentPhase.description.ToLower().Contains("hired") @* && rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() == null*@&& currentJob != null)
            {
                countSuccesfull.Add(application);

            }
        }


        <div class="main-wrapper-child job-cards">
            <div class="card-header d-flex align-content-center justify-content-center accepted-heading">
                <span class="count">@countSuccesfull.Count</span><span style="margin-left:5px;">Successful</span><span style="margin-left:5px;">Application</span>@if (@countSuccesfull.Count > 1)
                {<span>s</span>}
                else
                {<span></span>}
            </div>

            @foreach (var application in applications)
            {
                Job currentJob = null;

                @if (jobsFiltered == null || searchCandidate == "" || searchCandidate == " ")
                {
                    currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
                }
                else if (jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault() != null)
                {
                    currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
                }

                ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

                @if (currentPhase.description.ToLower().Contains("hired") @*&& rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() == null*@ && currentJob != null)
                {
                    <div class="job-card accepted">
                        <span class="position">@currentJob.Title</span>
                        <span class="company">@currentJob.Company.Name</span>
                        <small class="addition-details text-muted">@currentJob.Location.Name</small>
                        <small class="phase left-text">
                            <span class="phase-pill" style="@(GetColor(currentPhase.description))">@currentPhase.description</span>
                        </small>
                        <small class="addition-details text-muted">Date Advertised: @currentJob.CreationDate.ToString("MM/dd/yyyy")</small>
                    </div>


                }
            }
        </div>
        @*Unsuccessfull Application*@
        @foreach (var application in applications)
        {
            Job currentJob = null;

            @if (jobsFiltered == null || searchCandidate == "" || searchCandidate == " ")
            {
                currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
            }
            else if (jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault() != null)
            {
                currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
            }

            ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

            @if ( currentPhase.description.ToLower().Contains("rejected") && rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() == null && currentJob != null @*rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() != null && currentJob != null*@)
            {
                countUnsuccessfull.Add(application);
            }
        }

    <div class="main-wrapper-child job-cards rejection-card">
        <div class="card-header  d-flex align-content-center justify-content-center rejection-heading">
            <span class="count">@countUnsuccessfull.Count</span><span style="margin-left:5px;">Unsuccessful</span><br><span style="margin-left:5px;">Application</span>@if (countUnsuccessfull.Count > 1)
            {
                <span>s</span>}
            else
            { <span></span>}
        </div>

        @foreach (var application in applications)
        {
            Job currentJob;
                
                if(jobsFiltered!=null)
            {
                currentJob = jobsFiltered.Where(x => x.Id == application.JobId).FirstOrDefault();
            }
            else
            {
                currentJob = jobs.Where(x => x.Id == application.JobId).FirstOrDefault();
            }

            ApplicationPhase currentPhase = phases.Where(x => x.id == application.ApplicationPhaseId).FirstOrDefault();

            @if ( currentPhase.description.ToLower().Contains("rejected") && rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() == null && currentJob != null  @*rejectedCandidates.Where(x => x.applicationId == application.Id).FirstOrDefault() != null && currentJob != null*@)
            {
                <div class="job-card rejection">
                    <span class="position">@currentJob.Title</span>
                    <span class="company">@currentJob.Company.Name</span>
                    <small class="addition-details">@currentJob.Location.Name</small>
                    <small class="phase left-text">Last Phase : 
                        <span class="phase-pill rejection-phase" style="@(GetColor(currentPhase.description))">@currentPhase.description</span>
                    </small>
                    <small class="addition-details">Date Advertised: @currentJob.CreationDate.ToString("MM/dd/yyyy")</small>
                    <small class="addition-details">Date Closed : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@currentJob.DueDate.ToString("MM/dd/yyyy")</small>
                </div>
            }
        }
    </div>

    </div>
}
else
{
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
        Getting Jobs....
    </button>
}

@code {
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    private IList<Job> jobs = new List<Job>();
    private IList<ApplicationModel> applications = new List<ApplicationModel>();
    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private IList<RejectedCandidate> rejectedCandidates = new List<RejectedCandidate>();
    private List<ApplicationModel> countSuccesfull = new List<ApplicationModel>();
    private List<ApplicationModel> countUnsuccessfull = new List<ApplicationModel>();
    private IList<Job> jobsFiltered = null;
    string searchCandidate = "";

    string token;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("jwt_token");

        jobs = await httpClient.GetListJsonAsync<List<Job>>("Job", new AuthenticationHeaderValue("Bearer", token));
        applications = await httpClient.GetListJsonAsync<List<ApplicationModel>>($"application/all/{state.AppUserId}", new AuthenticationHeaderValue("Bearer", token));
        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("ApplicationPhase", new AuthenticationHeaderValue("Bearer", token));
        rejectedCandidates = await httpClient.GetListJsonAsync<List<RejectedCandidate>>("RejectedCandidate", new AuthenticationHeaderValue("Bearer", token));
    }

    private void FindApplications()
    {
        applications = applications.Where(x => x.AppUserId == state.AppUserId).ToList();
    }

    private string GetColor(string applicationPhase)
    {
        string bg_colour;
        string text_colour;

        bg_colour = "rgba(0, 155, 174, 0.22)";
        text_colour = "rgba(0, 155, 174, 1)";

        return $"background: {bg_colour}; color: {text_colour}; box-shadow: {text_colour} 0 10px 20px -10px;";
    }
    private void SearchApplications(ChangeEventArgs e)
    {
        searchCandidate = e.Value.ToString();
        countSuccesfull.Clear();
        countUnsuccessfull.Clear();

        jobsFiltered = jobs.Where(x => x.Title.ToLower().Contains(searchCandidate.ToLower())).ToList();
    }

    //searchCandidate = e.Value.ToString();
}
}