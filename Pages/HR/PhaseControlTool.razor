@page "/phasecontrol"
@inject HttpClient httpClient
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager
@inject UserState _state
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService Dialog
@inject CreateJobPost TempJob
<style>

    .select-phase {
        text-align: center;
        height: 100%;
        width: 45%;
        margin-left: 5%;
        margin-right: 5%;
        background-color: transparent;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
        border-radius: 2em;
    }

    .select-phase-content {
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
        margin-left: 0px;
    }

    .phase-order {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-right: 5%;
        background-color: transparent;
        border-radius: 2em;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
    }

    .phase-order-content {
        justify-content: center;
        text-align: center;
        width: 95%;
        height: 100%;
        margin-left: 2.5%;
        margin-right: 2.5%;
    }

    .button {
        margin-top: 10px;
    }

    .button-content {
        background-color: lightseagreen;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 3px;
    }

    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        height: 30%;
        margin-top: 10%;
    }

    .close {
        position: absolute;
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        padding-right: 10px;
        top: 0px;
        right: 0px;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .close-phase {
        color: #aaaaaa;
        font-size: 35px;
        font-weight: bold;
    }

        .close-phase:hover,
        .close-phase:focus {
            color: lightseagreen;
            text-decoration: none;
            cursor: pointer;
        }

    .modalbox {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    td:hover {
        color: lightseagreen;
        text-decoration: none;
        cursor: pointer;
    }

    input {
        width: 100%;
        height: 50%;
    }

    .select-phase-header {
        font-family: opensans-condensed-bold;
        font-weight: 700;
        color: white;
        background-color: #00bcae;
        text-align: center;
        font-size: 1.5em;
        border-top-right-radius: 2em;
        border-top-left-radius: 2em;
        width: 100%;
        text-transform: uppercase;
    }

    .appform-container {
        height: 55vh;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        display: flex;
    }

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: auto;
        overflow-x: hidden;
        width: 100%;
        padding: 5px;
    }

    .appform-left-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 20px !important;
        min-height: 6vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
        padding-right: 5px !important;
    }

    .appform-left-row-selected {
        border-radius: 20px !important;
        min-height: 7vh;
        color: #00bcae;
        !important;
        font-family: opensans-condensed-bold,serif;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
    }

    .appform-left-row:hover {
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        min-height: 9vh;
        color: white;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
    }

    .appform-right-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 10px !important;
        min-height: 7vh;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 0;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 350px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .delete-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 450px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .add-popup-header {
        width: 100%;
        height: 15%;
        display: flex;
        align-items: center;
    }

    .add-popup-body {
        width: 100%;
        height: 60%;
        display: flex;
        justify-content: center;
    }

    .add-popup-type {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup-button {
        width: 100%;
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .delete-popup-header {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .delete-popup-body {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        overflow-y: scroll;
        background-color: white;
    }

    .delete-popup-question {
        word-wrap: break-word;
        width: 450px;
    }

    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: calc(100% - 10px);
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .collaborators-left-main {
        padding: 10px;
    }

    .phase-div {
        display: flex;
        align-items: center;
    }

        .phase-div > .phase-name {
            font-size: 1.5rem;
        }

    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto;
    }

    .grid-container-content {
        display: grid;
        grid-template-columns: auto auto auto;
    }

    .grid-item-content {
        height: stretch;
    }

    .grid-item {
        text-align: center;
    }

    .grid-item-summary {
        text-align: center;
        background-color: #00BCAE;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        height: 37em;
    }

    .grid-item-empty {
        text-align: center;
        height: 37em;
    }

    .headings {
        color: navy
    }

    .bottom-buttons {
        margin-top: 3vh;
        margin-left: 25% !important;
        position: absolute;
        bottom: 5vh;
    }

</style>
<!--The HTML for the progress bar-->
@if(prevPage)
{
    <XebecPortal.UI.Pages.HR.ApplicationFormControlTool/>
}
else if(nextPage)
{
    <XebecPortal.UI.Pages.HR.Collaborators/>
}
else
{
     <div class="top-Image-thing">
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        @*<div class="circle"></div>
        <div class="circle"></div>*@
 </div>
    <div class="selected-rod" style="width: 52%;"></div>
    <div class="progress-rod" style=" left: 60%; width: 31%"></div>
    <div class="NumberDisplay">
        <div>1</div>
        <div>2</div>
        <div>3</div>
        <div>4</div>
        <div>5</div>
        @*<div>6</div>
        <div>7</div>*@
    </div>
    <div class="TextDisplay">
        <div class="selected-create-a-job-text-page">Create A Job</div>
        <div class="selected-application-form-text">Build Application Form</div>
        <div class="selected-phases-text">Select Phases</div>
        <div class="collaboration-text">Select Collaboration</div>
        @*<div class="collaboration-text-part-2">Select Collaboration Part 2</div>*@        
        <div class="post-a-job-text">Post Job</div>
        @*<div class="summary-text">Summary</div>*@
    </div>


<div class="create-job-summary">
    <div class="page-title">
        <h1 style="font-size: 38px !important;">Summary</h1>
    </div>

    <div class="summary-container">
        <div class="text-center">
            @foreach (var item in phasesAdded)
            {
                <span style="color: white">@item.description</span>
                <br />
            }
        </div>
    </div>
</div>

<div class="createjob-form-container">
    <div class="form-subheading text-center">
        <h1 style="font-size: 38px !important;">PHASE FORM</h1>
    </div>
    <br />
    <div>
        <div class="grid-container">
            <div class="grid-item">
                <select class="select-form" style="width: 15em" @onchange="customAddPhase">
                    <option selected disabled="disabled">Select Phase</option>
                    <optgroup label="Select All Phases">
                        <option @onclick="AddAllPhases" value="50">Add All Phases</option>
                    </optgroup>
                    <optgroup label="Phase Options">
                        @foreach (var item in phases.Where(x => x.description!="Applied" && x.description!="Hired" && x.description != "Rejected"))
                        {
                            <option value="@item.id">@item.description</option>
                        }
                    </optgroup>
                </select>
            </div>
            <div class="grid-item">
                <button class="default-button-style" @onclick="OpenAddPhaseDialog">Add Phase</button>
            </div>
            <div class="grid-item">
                <button class="default-button-style" @onclick="OpenDeletePhaseDialog">Delete Phase</button>
            </div>
            <div class="grid-item d-flex justify-content-center">
                <div class="overflow-auto" style="width: 15em; height: 21em">
                    @if (phasesAdded?.Any() == true)
                    {
                        foreach (var item in phasesAdded.Where(x => x.description!="Applied" && x.description!="Hired" && x.description!="Rejected"))
                        {
                            <br />
                            <div class="card" style="width: 14em">
                                <div class="card-header d-flex justify-content-end">
                                    <button type="button" class="btn-close" @onclick="() => DeletePhaseOrderPhase(item)"></button>
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@item.description</h5>
                                </div>
                            </div>
                        }
                        <br />
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="bottom-buttons">
        <button class="default-button-style " @onclick="Previous" disabled="@saveButtonPressed">Prev</button>
        <button class="default-button-style " @onclick="SubmitPhases" disabled="@saveButtonPressed">Save</button>
        <button class="default-button-style " @onclick="Next" disabled="@saveButtonPressed">Next</button>
    </div>
</div>


}



@*<div class="form-container">
        <div class="inner-form-container">
            <div class="form-heading">
                <h4 class="form-subheading">PHASE FORM</h4>
            </div>
            <br />
            <div>prev
                <div class="grid-container">
                    <div class="grid-item">
                        <select class="select-form" style="width: 15em" @onchange="customAddPhase">
                            <option selected disabled="disabled">Select Phase</option>
                            <optgroup label="Select All Phases">
                                <option @onclick="AddAllPhases" value="50">Add All Phases</option>
                            </optgroup>
                            <optgroup label="Phase Options">
                                @foreach (var item in phases)
                                {
                                    <option value="@item.id">@item.description</option>
                                }
                            </optgroup>
                        </select>
                    </div>
                    <div class="grid-item">
                        <button class="btn rounded-3" style="background: #00bcae" @onclick="OpenAddPhaseDialog">Add Phase</button>
                    </div>
                    <div class="grid-item">
                        <button class="btn rounded-3" style="background: #00bcae" @onclick="OpenDeletePhaseDialog">Delete Phase</button>
                    </div>
                    <div class="grid-item d-flex justify-content-center">
                        <div class="overflow-auto" style="width: 15em; height: 22em">
                            @if (phasesAdded?.Any() == true)
                            {
                                foreach (var item in phasesAdded)
                                {
                                    <br />
                                    <div class="card" style="width: 14em">
                                        <div class="card-header d-flex justify-content-end">
                                            <button type="button" class="btn-close" @onclick="() => DeletePhaseOrderPhase(item)"></button>
                                        </div>
                                        <div class="card-body">
                                            <h5 class="card-title">@item.description</h5>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="summary-section">
            <div class="summary-heading">
                <h5>SUMMARY</h5>
            </div>

            <div class="collaborators-left-table">
            </div>
        </div>
    </div>
    <div class="nav-btns">
        <button class="down-button">Prev</button>
        <button class="down-button">Save</button>
        <button class="down-button">Next</button>
    </div>*@



<MatDialog @bind-IsOpen="isDialogAddPhaseVisible">
    <MatDialogTitle>Add Phase</MatDialogTitle>
    <MatDialogContent>
        <div class="row">
            <div class="col-12">
                <br />
            </div>
            <div class="col-12">
                <input class="create-form-text" placeholder="Phase Name" @bind="addPhaseValue" />
            </div>
            <div class="col-12">
                <br />
            </div>
            <div class="col-12 d-flex justify-content-center">
                <button class="default-button-style" type="button" @onclick="AddPhase" disabled="@addPhasePressed">ADD</button>
            </div>
        </div>
    </MatDialogContent>
</MatDialog>

<MatDialog @bind-IsOpen="isDialogDeletePhaseVisible">
    <MatDialogTitle>Delete Phase</MatDialogTitle>
    <MatDialogContent>
        <div class="row">
            <div class="col-12">
                <br />
            </div>
            <div class="col-12">
                <div class="grid-item d-flex justify-content-center">
                    <div class="overflow-auto" style="height: 22em">
                        @if (phases?.Any() == true)
                        {
                            foreach (var item in phases.Where(x => x.description != "Applied" && x.description != "Hired" && x.description != "Rejected"))
                            {
                                <br />
                                <div class="card">
                                    <div class="card-header d-flex justify-content-end">
                                        <button type="button" class="btn-close" @onclick="() => DeletePhase(item)"></button>
                                    </div>
                                    <div class="card-body">
                                        <h5 class="card-title">@item.description</h5>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </MatDialogContent>
</MatDialog>


@code
{
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    private bool addPhasePressed = false;
    private bool saveButtonPressed = false;

    private List<ApplicationPhase> phases = new List<ApplicationPhase>();
    private List<ApplicationPhase> phasesAdded = new List<ApplicationPhase>();
    private IList<Job> jobs = new List<Job>();
    ApplicationPhase phaseValue = new ApplicationPhase();
    ApplicationPhase tempPhaseValue = new ApplicationPhase();
    private string developerAssigned = "";
    private string token;
    private string addPhaseValue;
    private bool isDialogAddPhaseVisible;
    private bool isDialogDeletePhaseVisible;
    public int CurrentJobId;

    bool nextPage = false;
    bool prevPage = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentJobId = TempJob.Id;
        token = await localStorage.GetItemAsync<string>("jwt_token");

        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("applicationphase", new AuthenticationHeaderValue("Bearer", token));

        jobs = await httpClient.GetListJsonAsync<List<Job>>("job", new AuthenticationHeaderValue("Bearer", token));

        phasesAdded.Add(phases.FirstOrDefault(x => x.description == "Applied"));
        phasesAdded.Add(phases.FirstOrDefault(x => x.description == "Hired"));
        phasesAdded.Add(phases.FirstOrDefault(x => x.description == "Rejected"));
    }



    private async Task DeletePhase(ApplicationPhase phase)
    {
        //this deletes from the db
        if(phase.description!="Applied" && phase.description!="Hired" && phase.description!="Rejection")
        {
            await httpClient.DeleteJsonAsync($"applicationphase/{phase.id}", new AuthenticationHeaderValue("Bearer", token));
            phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("applicationphase", new AuthenticationHeaderValue("Bearer", token));
        }

    }

    private async Task AddPhase()
    {
        addPhasePressed = true;
        if (string.IsNullOrWhiteSpace(addPhaseValue) == false)
        {
            tempPhaseValue = new() { description = addPhaseValue };
            await httpClient.PostJsonAsync<ApplicationPhase>("applicationphase", tempPhaseValue, new AuthenticationHeaderValue("Bearer", token));
            phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("applicationphase", new AuthenticationHeaderValue("Bearer", token));
            addPhaseValue = "";

            isDialogAddPhaseVisible = !isDialogAddPhaseVisible;
        }

        await jsr.InvokeAsync<string>("alert", "Phase saved successfully.");
        addPhasePressed = false;
    }

    private async Task SubmitPhases()
    {
        saveButtonPressed = true;
        foreach (var phase in phasesAdded)
        {
            JobApplicationPhase temp = new JobApplicationPhase();
            temp.JobId = CurrentJobId;
            temp.ApplicationPhaseId = phase.id;
            await httpClient.PostJsonAsync<JobApplicationPhase>("jobapplicationphase", temp, new AuthenticationHeaderValue("Bearer", token));
        }

        await jsr.InvokeAsync<string>("alert", "Phases successfully added to job.");
        saveButtonPressed = false;
    }

    private async Task AddPhase(ApplicationPhase phase)
    {
        addPhasePressed = true;

        if (!phasesAdded.Contains(phase))
        {
            phasesAdded.Add(phase);
        }

        //await jsr.InvokeAsync<string>("alert", "Phase saved successfully.");
        addPhasePressed = false;
    }

    private void AddAllPhases()
    {
        if (phasesAdded != phases && phasesAdded.Count != phases.Count)
        {
            foreach (var item in phases)
            {
                if (!phasesAdded.Contains(item))
                {
                    phasesAdded.Add(item);
                }
            }
        }
    }

    private void DeletePhaseOrderPhase(ApplicationPhase phase)
    {
        //this just removes from the list

        if(phase.description!="Applied" && phase.description!="Hired" && phase.description!="Rejected")
        {
            phasesAdded.Remove(phase);
        }
        
    }

    private async Task Submit()
    {
        TempJob.JobPhases = phasesAdded;
       //await TempJobChanged.InvokeAsync(TempJob);

        //Job page post
        Job job = new Job();
        job.MinimumExperience = null;

        job.Title = TempJob.Title;
        job.Description = TempJob.Description;
        job.CompanyId = TempJob.CompanyId;
        job.LocationId = TempJob.LocationId;
        job.DueDate = TempJob.DueDate;
        job.CreationDate = TempJob.CreationDate;


        await httpClient.PostAsJsonAsync("job", job);
        job = null;

        job = await GetJob();

        SubmitRest(job);
    }

    private async Task<Job> GetJob()
    {
        List<Job> ListOfJobs = await httpClient.GetListJsonAsync<List<Job>>("job", new AuthenticationHeaderValue("Bearer", token));
        return ListOfJobs.LastOrDefault(x => x.Title == TempJob.Title);
    }

    private async Task SubmitRest(Job job)
    {
        //Add Job type to JobTypeHelpers
        JobTypeHelper jobTypeHelper = new JobTypeHelper();
        jobTypeHelper.JobId = job.Id;
        jobTypeHelper.JobTypeId = TempJob.JobType.Id;

        await httpClient.PostAsJsonAsync("jobtypehelper", jobTypeHelper);

        //Add selected platforms to JobPlatformHelpers
        foreach (var platform in TempJob.JobPlatforms)
        {
            JobPlatformHelper jobPlatformHelper = new JobPlatformHelper();
            jobPlatformHelper.JobId = job.Id;
            jobPlatformHelper.JobPlatformId = platform.id;

            await httpClient.PostAsJsonAsync("jobplatformhelper", jobPlatformHelper);
        }

        //Add collaborators to CollaboratorsAssigned
        foreach (var Collaborator in TempJob.Collaborators)
        {
            Collaborator collaborator = new Collaborator();
            collaborator.Name = Collaborator.name;
            collaborator.JobId = job.Id;
            collaborator.AppUserId = Collaborator.id;

            await httpClient.PostAsJsonAsync("collaboratorsassigned", collaborator);
        }

        //Add form questions
        foreach (var formQuestion in TempJob.formQuestions)
        {
            formQuestion.jobId = job.Id;
        }
        await httpClient.PostAsJsonAsync("Questionnaire/lst", TempJob.formQuestions);

        //Add Application Phases
        foreach (var phase in phasesAdded)
        {
            JobApplicationPhase JobApplicationPhase_ = new JobApplicationPhase();
            JobApplicationPhase_.JobId = job.Id;
            JobApplicationPhase_.ApplicationPhaseId = phase.id;

            await httpClient.PostAsJsonAsync($"jobapplicationphase/{job.Id}", JobApplicationPhase_);
        }

        //await TempJobChanged.InvokeAsync(TempJob);
    }

    private void OpenAddPhaseDialog()
    {
        isDialogAddPhaseVisible = true;
        isDialogDeletePhaseVisible = false;
    }

    private void OpenDeletePhaseDialog()
    {
        isDialogDeletePhaseVisible = true;
        isDialogAddPhaseVisible = false;
    }

    private void customAddPhase(ChangeEventArgs e)
    {
        //"50" is passed if Select All Phases is selected
        if (e.Value.ToString() == "50")
        {
            AddAllPhases();
        }
        else
        {
            AddPhase(phases.First(x => x.id.ToString() == e.Value.ToString()));
        }

    }

    private void Next()
    {
        nextPage = true;
    }

    private void Previous()
    {
        prevPage = true;

    }
}
