@page "/applicantportal"
@using XebecPortal.UI.Services.Models
@inject HttpClient httpClient
@inject HrJobState hrJobState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject UserState userstate
@inject IJSRuntime JSRuntime

<style>

    .page-top {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 15px;
    }

    .table-applicants-container {
        display: flex;
        align-items: center;
        flex-direction: column;
        height: 60vh;
        margin-top: 15px;
    }

        .table-applicants-container td {
            text-align: center;
        }

        .table-applicants-container table {
            width: 95%;
        }

        .table-applicants-container thead tr {
            height: 7vh;
            background: #00bcae;
            color: white;
            font-weight: 800;
            font-family: opensans-condensed-bold;
            font-size: 1em;
        }

        .table-applicants-container tbody tr {
            border-bottom: 1px solid #e2e2e2;
            height: 9vh;
            background: #fff;
        }

        .table-applicants-container tbody {
            display: block;
            height: 53vh;
            overflow: auto;
        }

        .table-applicants-container thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .table-applicants-container tr:first-child td:first-child {
            border-top-left-radius: 10px;
        }

        .table-applicants-container tr:first-child td:last-child {
            border-top-right-radius: 10px;
        }

        .table-applicants-container img {
            height: 7vh;
            width: 7vh;
                            object-fit: cover;
    object-position: center;
    border-radius: 50px;
        }

    .dimmed {
        background: rgb(0 0 0 / 0.20);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-frame {
        width: 40%;
        height: 48%;
        border-radius: 15px;
        background: white;
        position: relative;
        /*overflow-y: auto;*/
    }

        .modal-frame thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

    .close-modal {
        font-size: 30px;
        font-weight: bold;
        color: white;
        text-align: right;
        padding-bottom: 10px;
        padding-right: 30px;
        width: 20px;
        overflow: hidden !important;
    }

        .close-modal:hover {
            color: #d35bc9;
            cursor: pointer;
        }

    .title-column {
        font-weight: 600;
    }

    .title-modal {
        font-size: 20px;
    }

    .modal-frame thead td {
        font-weight: bold;
        background: #00bcae;
        color: white;
    }

        .modal-frame thead td:first-child {
            border-top-left-radius: 15px;
        }

        .modal-frame thead td:last-child {
            border-top-right-radius: 15px;
        }

    .modal-frame td {
        margin-bottom: 5px;
        margin-top: 5px;
        padding-left: 10px;
        overflow-x: auto;
    }

    .info-empty {
        color: #ec0f0f;
    }

    .modal-frame tbody {
        display: block;
        height: 38vh;
        overflow-y: auto;
        overflow-x: hidden;
        padding-right: 10px;
        padding-bottom: 5px;
        padding-left:10px;
    }

    .show-more-td {
        font-weight: 600;
    }

        .show-more-td:hover {
            cursor: pointer;
            color: #d35bc9;
        }


    .work-history-card {
        height: 20vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
    }

    .work-references-card {
        height: 10vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
        overflow: hidden;
    }

    .work-history-company-name {
        grid-area: companyName;
        font-weight: bold;
        text-align: left;
    }

    .work-history-job-title {
        grid-area: jobTitle;
        text-align: left;
        font-weight: 600;
        color: #414141
    }

    .work-history-date {
        grid-area: date;
        text-align: right;
        color: #d35bc9;
    }

    .work-history-description {
        grid-area: description;
    }

    .grid-container {
        display: grid;
        height: 100%;
        grid-template-areas:
            'companyName companyName companyName companyName'
            'jobTitle jobTitle jobTitle jobTitle'
            'description description description description'
            'date date date date';
        padding: 10px;
    }

    .ref-name {
        grid-area: name;
        font-weight: bold;
    }

    .ref-lastname {
        grid-area: lastname;
    }

    .ref-phone {
        grid-area: phone;
    }

    .ref-email {
        grid-area: email;
        text-align: right;
    }

    .ref-relationship {
        grid-area: relationship;
        text-align: right;
        font-weight: bold;
    }

    .grid-container-references {
        display: grid;
        grid-template-areas:
            'name name relationship relationship'
            'phone phone email email';
        padding: 10px;
    }

    .total-match-pill {
        margin-top: 30px;
        width: 50px;
        height: 20px;
        border-radius: 1em;
        font-weight: bold;
        border: 1px solid grey;
        text-align: center;
    }

    .loading-icon {
        margin-top: 150px;
    }

    .btn-view-documents {
        height: 7vh;
        width: 70%;
        border-radius: 2em;
        border: none;
        color: white;
        background-color: #00BCAE;
        font-weight: 700;
        font-weight: bold;
    }

    .btn-view-document {
        height: 5%;
        width: 10%;
        border-radius: 2em;
        border: none;
        color: white;
        background-color: #00BCAE;
        font-weight: 700;
        font-weight: bold;
    }

    .modal-frame-documents {
        height: 85%;
        width: 65%;
        border-radius: 1em;
        background-color: white;
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
        flex-direction: column;
    }

    .modal-frame-documents-rows {
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
    }

        .modal-frame-documents-rows .mini-modal-frame-documents img {
            height: 80%;
            width: 60%;
            margin-top: 10px;
                object-fit: cover;
    object-position: center;
    border-radius: 50px;
        }

    .mini-modal-frame-documents {
        height: 25vh;
        width: 16vw;
        border-radius: 1em;
        background-color: white;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

        .mini-modal-frame-documents:hover {
            height: 25vh;
            width: 16vw;
            border-radius: 1em;
            background-color: white;
            box-shadow: 0 4px 8px 0 #00bcae, 0 6px 20px 0 #00bcae;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            cursor: pointer;
        }

    .img-document-profile {
        height: 80px;
        width: 80px;
    }

    .img-document {
        height: 60%;
        width: 90%;
    }

    .modal-document-header {
        display: flex;
        justify-content: right;
    }

    .modal-document-profile {
        display: flex;
        flex-direction: column;
        margin-right: 4%;
    }

        .modal-document-profile img {
            width: 90px;
            height: 90px;
                            object-fit: cover;
    object-position: center;
    border-radius: 50px;
        }


    a:hover {
        cursor: pointer;
    }

    .img-magnified {
        height: 95vh;
        width: 35vw;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: white;
        border-radius: 1em;
    }

        .img-magnified img {
            width: 90%;
            height: 90%;
        }

    .myjob-search-bar {
        width: 40%;
        height: 5vh;
        margin-bottom: 2.5vh;
        margin-top: 2.5vh;
        margin-left: 30%;
        margin-right: 30%;
    }

    .search-image {
        padding-left: 2em;
        background: url(/Img/search.svg) no-repeat left;
        background-size: 30px;
    }

    .hr-job-search-bar-input {
        padding-left: 3em;
        background-color: white;
        height: 6vh;
        width: 100%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 rgba(0,0,0,0.2);
        border: white solid 0.1em;
        border-radius: 1.5em;
    }

    .additional-information {
        color: #00bcae;
        margin-top: 5px;
    }

        .additional-information:hover {
            color: #d35bc9;
            cursor: pointer;
        }

    .additional-information-title {
        font: extra-bold;
        font-size: 25px;
        text-align: center;
        border-bottom: 1px solid rgba(238, 238, 238, 0.6);
    }


    .mydialog-final {
        width: 450px;
        height: 350px;
        background-color: white;
        border-radius: 12px;
    }

    .mydialog-final-title {
        width: 100%;
        height: 20%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: opensans-bold;
        font-size: 1em;
        color: black;
        text-align: center;
    }

    .mydialog-final-body {
        width: 100%;
        height: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .mydialog-final-button {
        width: 100%;
        height: 20%;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
    }

    .mydialog-final-textarea {
        width: 85%;
        height: 90%;
        padding: 5px;
        resize: none;
    }

    .mydialog-final-rejection-area{
        width: 100%;
        height: 10%;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
    }

    .btn-view-applicationform {
        font-family: opensans-condensed-bold;
        color: #00bcae;
    }

        .btn-view-applicationform:hover {
            text-decoration: underline;
            font-family: opensans-condensed-bold;
            color: #d35bc9;
        }

    .zoom-documunts-onclick {
        width: 165px;
        height: 130px;
        margin-top: -35px;
        position: absolute;
    }

    .documents-size {
        width: 100%;
        height: 100%;
        border-radius: 1em;
    }

    .maginified-documents-close {
    position: absolute;
    top: 5px;
    left: 67%;
    background-color: transparent !important;
    opacity: 1;
    }

        .maginified-documents-close:checked {
            border: none;
        }

</style>

<div class="search-wrapper-container" style=" width: 40%; left: 30%;">
    <input class="search-bar-input" placeholder="Search For Applicants" type="text" @oninput="SearchApplicants" />
    <img class="search-bar-pic" src="/Img/search.svg" />
</div>

<div class="table-applicants-container">

    @if (applications != null)
    {
        <table>
            <thead>
                <tr>
                    <td></td>
                    <td>Full Name</td>
                    <td>Application Match</td>
                    <td>Position</td>
                    <td>Application Phase</td>
                    <td style="text-align:center; padding-left: 30px">Application Date</td>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var application in applications)
                {
                    AppUser user = new AppUser();

                    //Shows users according to search
                    @if (usersFiltered == null || searchCandidate == "" || searchCandidate == " ")
                    {
                        user = users.Where(x => x.id == application.AppUserId).FirstOrDefault();
                    }
                    else if (usersFiltered.Where(x => x.id == application.AppUserId).FirstOrDefault() != null)
                    {
                        user = usersFiltered.Where(x => x.id == application.AppUserId).FirstOrDefault();
                    }

                    @if (JobId == application.JobId && application.AppUserId == user.id)
                    {
                        double match = 0;
                        @if (candidates.Where(x => x.AppUserId == user.id && x.jobId == JobId).FirstOrDefault() != null)
                        {
                            match = Math.Round(candidates.Where(x => x.AppUserId == user.id && x.jobId == JobId).FirstOrDefault().TotalMatch, 2);
                        }

                        string jobTitle = jobs.Where(x => x.Id == JobId).FirstOrDefault().Title;
                        @*string img;*@
                        //Checks that the profile picture exists

                        @*foreach (var item in userProfilePicture)
                        {
                            if (item.AppUserId == user.id)
                            {
                                if (!String.IsNullOrEmpty(item.profilePic))
                                {
                                    userImage = item.profilePic;
                                    break;
                                }
                                else
                                {
                                    userImage = defaultImage;
                                    break;
                                }            
                            }
                        }*@

                        if (userProfilePicture.Where(x => x.AppUserId == user.id).FirstOrDefault() != null)
                        {
                            if (userProfilePicture.Where(x => x.AppUserId == user.id).FirstOrDefault().profilePic != null)
                            {
                                userImage = userProfilePicture.Where(x => x.AppUserId == user.id).FirstOrDefault().profilePic;
                            }
                            else
                            {
                                userImage = defaultImage;
                            }
                        }
                        else
                        {
                            userImage = defaultImage;//"https://xebecstorage.blob.core.windows.net/profile-images/0";
                        }

                        <tr>
                            <td><img src="@userImage" alt="Avatar"></td>
                            <td style="font-size: 1.2em; font-family: opensans-condensed-bold">@user.name @empty @user.surname</td>
                            <td style="display: flex; justify-content: center"><div class="total-match-pill" style="@setMatch(match)">@match</div></td>
                            <td>@jobTitle</td>
                            <td>
                                <select style="text-align: center" @onblur="() => setApplication(application.Id)" @onchange="updatePhase">
                                    <option selected>@FindCurrentPhase(@user.id, JobId)</option>

                                    @foreach (var phase in phases)
                                    {
                                        <option>@phase.description</option>
                                    }
                                </select>
                            </td>
                            <td style="font-weight: 400; font-family: opensans-condensed-bold; font-size: 1em; color: #d35bc9; text-align: center; padding-left: 30px">@($"{application.TimeApplied:dd MMM yyyy}")</td>
                            <td><a class="btn-view-applicationform" @onclick="() => toggleApplicationForm(user, JobId)">View Application Form</a></td>
                            <td><input type="button" class="btn-view-documents" value="View Documents" @onclick="() => toggleDocuments(user)" /></td>
                        </tr>

                    }
                }

                @if (applications.Count() == 0 || applications == null)
                {
                <div style="text-align: center">No Applications found</div>
                }

            </tbody>
        </table>

        <MatDialog @bind-IsOpen="@showEmail">
            <div class="mydialog-final">
                <div class="mydialog-final-title">
                    <h2>Email Applicant</h2>
                </div>
                <div class="mydialog-final-rejection-area">
                    <select hidden="@rejectionEmailHidden" @onchange="SetRejectionReason">
                        <option disabled>Select a reason</option>
                        @foreach(var reason in reasons)
                        {
                            <option value="@reason.Id">@reason.Reason</option>
                        }
                    </select>
                </div>
                <div class="mydialog-final-body">
                    <textarea class="mydialog-final-textarea" @bind="emailContent" @bind:event="oninput" placeholder="Email applicant"></textarea>
                </div>
                <div class="mydialog-final-button">
                    <button class="default-button-style" @onclick="() => { showEmail = false; }" disabled="@sendEmailPressed">Cancel</button>
                    <button class="default-button-style" @onclick="SendEmail" disabled="@sendEmailPressed">Send</button>
                </div>
            </div>
        </MatDialog>

    }
    else if (applications == null)
    {
        <MudProgressCircular Class="loading-icon" Size="Size.Large" Indeterminate="true" />
    }

</div>


@if (showDocuments)
{
    foreach (var item in userProfilePicture)
    {
        if (item.AppUserId == selectedUser.id)
        {
            if (!String.IsNullOrEmpty(item.profilePic))
            {
                userImage = item.profilePic;
                break;
            }
            else
            {
                userImage = defaultImage;
                break;
            }            
        }
    }
   @* if (userProfilePicture.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
    {
        if (userProfilePicture.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault().profilePic != null)
        {
            img = userProfilePicture.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault().profilePic;
            Console.WriteLine("User image result");
        }
        else
        {
            img = defaultImage;
        }
    }
    else
    {
        img = defaultImage;
    }*@

    <!--Work here - Andrew -->

    <div class="dimmed">

        <div class="modal-frame-documents">
            <div class="modal-document-header">
                <div class="modal-document-profile">
                    <div class="modal-frame-documents-rows"><img src="@userImage" alt="Avatar"></div>
                    <div class="modal-frame-documents-rows" style="color: #004393; font-family: opensans-condensed-bold">@selectedUser.name @empty @selectedUser.surname @empty Documents </div>
                </div>
                <input type="button" class="btn-view-documents" style="width: 100px; margin-right: 25px; margin-left:245px" value="Close" @onclick="toggleDocuments" />
            </div>
            <div class="modal-frame-documents-rows">
                <div class="mini-modal-frame-documents">
                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {

                        @if (String.IsNullOrEmpty(@getUserDoc.CV)|| noDocuments == true || documentsHasBeenAdded == false)
                        {
                            <div>
                                No CV's found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("linkedincv",true)'></div>
                            <iframe src="@getUserDoc.CV" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                CV
                            </div>
                        }
                        @*<div style="color: #00bcae; font-family: opensans-condensed-bold">
                CV
                </div>*@
                    }

                </div>
                <div class="mini-modal-frame-documents">
                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {

                        @if (String.IsNullOrEmpty(@getUserDoc.MatricCertificate)|| noDocuments == true || documentsHasBeenAdded == false)
                        {

                            <div>
                                No Matric Certificate found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("matric-certificates", true)'>  </div>
                            <iframe src="@getUserDoc.MatricCertificate" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                Matric Certificate
                            </div>
                        }
                    }

                </div>
                <div class="mini-modal-frame-documents">

                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        @if (String.IsNullOrEmpty(@getUserDoc.UniversityTranscript)|| noDocuments == true || documentsHasBeenAdded == false)
                        {
                            <div>
                                No University Transcript found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("transcripts", true)'>  </div>
                            <iframe src="@getUserDoc.UniversityTranscript" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                Academic Transcript
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="modal-frame-documents-rows">
                <div class="mini-modal-frame-documents">
                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        @if (String.IsNullOrEmpty(@getUserDoc.AdditionalCert1) || noDocuments == true || documentsHasBeenAdded == false)
                        {
                            <div>
                                No Certificate found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("additional-documents-1" , true)'>  </div>
                            <iframe src="@getUserDoc.AdditionalCert1" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                Certificate A
                            </div>
                        }
                    }
                </div>
                <div class="mini-modal-frame-documents">
                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {

                        @if (String.IsNullOrEmpty(@getUserDoc.AdditionalCert2) || noDocuments == true || documentsHasBeenAdded == false)
                        {
                            <div>
                                No Certificate found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("additional-documents-2" , true)'>  </div>
                            <iframe src="@getUserDoc.AdditionalCert2" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                Certificate B
                            </div>
                        }
                    }

                </div>
                <div class="mini-modal-frame-documents">
                    @if (loadingDocumentInfo)
                    {
                        <div>
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        @if (String.IsNullOrEmpty(@getUserDoc.AdditionalCert3) || noDocuments == true || documentsHasBeenAdded == false)
                        {
                            <div>
                                No Certificate found
                            </div>
                        }
                        else
                        {
                            <div class="zoom-documunts-onclick" @onclick='() => toggleMagnifiedDocument("additional-documents-3" , true)'>  </div>
                            <iframe src="@getUserDoc.AdditionalCert3" style="width: 80%; height: 80%;"></iframe>
                            <div style="color: #00bcae; font-family: opensans-condensed-bold">
                                Certificate C
                            </div>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
}


<!--Magnified Document-->
@if (showMagnifiedDocument)
{
    @switch (selectedDocument)
    {
        case "linkedincv":
            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.CV" class="documents-size"></iframe>
                </div>
            </div>
            <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />

            break;
        case "matric-certificates":
            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.MatricCertificate" class="documents-size"></iframe>
                </div>
                <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />
            </div>

            break;
        case "transcripts":

            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.UniversityTranscript" class="documents-size"></iframe>
                </div>
                <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />
            </div>

            break;
        case "additional-documents-1":

            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.AdditionalCert1" class="documents-size"></iframe>
                </div>
                <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />
            </div>

            break;
        case "additional-documents-2":

            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.AdditionalCert2" class="documents-size"></iframe>
                </div>
                <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />
            </div>

            break;
        case "additional-documents-3":
            <div class="dimmed">
                <div class="img-magnified">
                    <iframe src="@getUserDoc.AdditionalCert3" class="documents-size"></iframe>
                </div>
                <input type="button" class="btn-close maginified-documents-close" @onclick='() => toggleMagnifiedDocument("", false)' />
            </div>
            break;

    }
    @*<div class="dimmed">
        <div class="img-magnified">
            <input type="button" class="btn-view-document" style="margin-left:70%; margin-bottom: 2%;" value="Close" @onclick='() => toggleMagnifiedDocument("")' />
            <iframe src="https://xebecstorage.blob.core.windows.net/@selectedDocument/@selectedUser.id" style="width: 90%; height: 90%;"></iframe>
        </div>
    </div>*@
}


<!--ApplicationForm Modal-->
@if (showApplicationForm)
{
    @if (AnswerList != null && QuestionList != null && selectedUser != null)
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">
                                Application Form:
                            </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input type="button" class="btn-view-documents" style="width: 175px; height: 25px; margin-top: 8px;" value="Show Additional Information" @onclick="toggleAdditionalInformation" />
                            </td>
                        </tr>
                        @foreach (var answer in AnswerList)
                        {
                            @if (answer.appUserId == selectedUser.id)
                            {
                                FormQuestion question = QuestionList.Where(x => x.id == answer.questionnaireHRFormId && answer.appUserId == selectedUser.id).FirstOrDefault();
                                @if (question.jobId == JobId)
                                {
                                    @if (answer.applicantAnswer == "" || answer.applicantAnswer == " " || answer.applicantAnswer == null)
                                    {
                                        <tr>
                                            <td class="form-label" for="last-name">@question.question</td>
                                            <td id="last-name" class="form-control name" style="color: red">Not answered</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td class="form-label" for="last-name">@question.question</td>
                                            <td id="last-name" class="form-control name">@answer.applicantAnswer</td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">Application Form: </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="info-empty">No information saved.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
}


<!--Additional information Modal-->
@if (showAdditionalInformation)
{
    <div class="dimmed">
        <div class="modal-frame">

            <table>
                <thead>
                    <tr>
                        <td class="title-modal">Additional Information: </td>
                        <td class="close-modal" @onclick="toggleAdditionalInformation">x</td>
                    </tr>
                    <tr></tr>
                </thead>
                <tbody>

                    <!--Education-->
                    <tr>
                        <td>
                            <div class="additional-information-title">Education</div>
                        </td>
                    </tr>
                    @if (educations.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
                    {
                        @foreach (var education in educations)
                        {

                            @if (education.AppUserId == selectedUser.id)
                            {

                                <tr>
                                    <td class="form-label" for="last-name">Institution</td>
                                    <td id="last-name" class="form-control name">@education.Insitution</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Qualification</td>
                                    <td id="last-name" class="form-control name">@education.Qualification</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Start & Completion</td>
                                    <td id="last-name" class="form-control name">@($"{education.StartDate:dd MMM yyyy}") - @($"{education.EndDate:dd MMM yyyy}")</td>
                                </tr>
                                <tr>
                                    <td>@empty</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align:center">
                                No Education
                            </td>
                        </tr>
                    }


                    <!--Matric Marks-->
                    <tr>
                        <td>
                            <div class="additional-information-title">Matric Marks</div>
                        </td>
                    </tr>
                    @if (marks.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
                    {
                        @foreach (var mark in marks)
                        {

                            @if (mark.AppUserId == selectedUser.id)
                            {

                                <tr>
                                    <td class="form-label" for="last-name">@mark.SubjectName</td>
                                    <td id="last-name" class="form-control name">@mark.SubjectMark</td>
                                    
                                </tr>
                                @*<tr>
                                    <td class="form-label" for="last-name">Mark Obtained</td>
                                    <td id="last-name" class="form-control name">@mark.SubjectMark</td>
                                </tr>*@
                                <tr>
                                    <td>@empty</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align:center">
                                No Marks
                            </td>
                        </tr>
                    }


                    <!--Work Histories-->
                    <tr>
                        <td>
                            <div class="additional-information-title">Work Experience</div>
                        </td>
                    </tr>
                    @if (workHistories.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
                    {
                        @foreach (var workHistory in workHistories)
                        {

                            @if (workHistory.AppUserId == selectedUser.id)
                            {

                                <tr>
                                    <td class="form-label" for="last-name">Company</td>
                                    <td id="last-name" class="form-control name">@workHistory.CompanyName</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Title</td>
                                    <td id="last-name" class="form-control name">@workHistory.JobTitle</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Start & Completion</td>
                                    <td id="last-name" class="form-control name">@($"{workHistory.StartDate:dd MMM yyyy}") - @($"{workHistory.EndDate:dd MMM yyyy}")</td>
                                </tr>
                                <tr>
                                    <td>@empty</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align:center">
                                No Work Histories
                            </td>
                        </tr>
                    }


                    <!--Skills-->
                    <tr>
                        <td>
                            <div class="additional-information-title">Skills</div>
                        </td>
                    </tr>
                    @if (skills.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
                    {
                        @foreach (var skill in skills)
                        {


                            @if (skill.AppUserId == selectedUser.id)
                            {

                                <tr>
                                    <td class="form-label" for="last-name">Skill</td>
                                    <td id="last-name" class="form-control name">@skill.Description</td>
                                </tr>
                                <tr>
                                    <td>@empty</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align:center">
                                No skills
                            </td>
                        </tr>
                    }


                    <!--References-->
                    <tr>
                        <td>
                            <div class="additional-information-title">References</div>
                        </td>
                    </tr>
                    @if (references.Where(x => x.appUserId == selectedUser.id).FirstOrDefault() != null)
                    {
                        @foreach (var reference in references)
                        {

                            @if (reference.appUserId == selectedUser.id)
                            {

                                <tr>
                                    <td class="form-label" for="last-name">Name</td>
                                    <td id="last-name" class="form-control name">@reference.refFirstName @empty @reference.refLastName</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Phone</td>
                                    <td id="last-name" class="form-control name">@reference.refPhone</td>
                                </tr>
                                <tr>
                                    <td class="form-label" for="last-name">Email</td>
                                    <td id="last-name" class="form-control name">@reference.refEmail</td>
                                </tr>
                                <tr>
                                    <td>@empty</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align:center">
                                No References
                            </td>
                        </tr>
                    }


                </tbody>
            </table>
        </div>

    </div>
}


@code {
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    string empty = "  ";
    string phaseDescription = "";
    string phaseEdit = "";
    string savePhase = "";
    bool showApplicationForm = false;
    bool showAdditionalInformation = false;
    bool showDocuments = false;
    bool showMagnifiedDocument = false;

    string emailContent;
    int rejectionId;

    bool showEmail;
    bool rejectionEmailHidden;

    string currentPhase;
    int phaseId;
    int applicationId;

    private List<FormQuestion> QuestionList = new List<FormQuestion>();
    private List<ApplicantAnswer> AnswerList = new List<ApplicantAnswer>();
    private ApplicationModel tempApplication;
    private IList<ApplicationPhaseHelper> tempPhaseHelper;
    private int tempRank;
    private string tempJobTitle;
    private string searchCandidate;
    private ApplicationPhase phaseFinal;
    private string selectedJob = "";
    private string selectedDocument = "";
    private string searchTerm = "";
    private CandidateRecommender selectedCandidate;
    private AppUser selectedUser;
    private IList<AppUser> usersFiltered = null;
    private IList<Job> jobs = new List<Job>();
    private IList<CandidateRecommender> candidates = null;
    private IList<AppUser> users = new List<AppUser>();
    private IList<ApplicationPhaseHelper> phasesHelpers = new List<ApplicationPhaseHelper>();
    private IList<ApplicationModel> applications = null;
    private IList<Application> Applications = new List<Application>();
    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private IList<PersonalInformation> personalInformation = new List<PersonalInformation>();
    private IList<Education> educations = new List<Education>();
    private IList<matricMarks> marks = new List<matricMarks>();
    private IList<WorkHistory> workHistories = new List<WorkHistory>();
    private IList<SkillsInformation> skills = new List<SkillsInformation>();
    private IList<References> references = new List<References>();
    private IList<UnsuccessfulReason> reasons = new List<UnsuccessfulReason>();

    private EmailModel Email = new EmailModel();
    private IList<Document> userDocuments { get; set; }
    private List<Document> checkUserDoc = new List<Document>();
    private List<Document> UserDocumentsList = new List<Document>();
    private Document getUserDoc = new Document();
    private bool noDocuments = false;
    private bool documentsHasBeenAdded = false;
    private bool sendEmailPressed = false;
    private bool loadingDocumentInfo = false;
    private List<ProfilePicture> userProfilePicture = new List<ProfilePicture>();
    private string defaultImage = "/Img/DefaultImage.png";
    private string userImage;
    private currentPhase phase { get; set; }
    [Parameter] public int JobId { get; set; }

    private HttpClient emailClient = new HttpClient();

    string token;
    protected override async Task OnInitializedAsync()
    {
        showEmail = false;
        rejectionEmailHidden = true;
        rejectionId = 0;

        token = await localStorage.GetItemAsync<string>("jwt_token");

        jobs = await httpClient.GetListJsonAsync<List<Job>>("Job", new AuthenticationHeaderValue("Bearer", token));
        candidates = await httpClient.GetListJsonAsync<List<CandidateRecommender>>("candidaterecommender", new AuthenticationHeaderValue("Bearer", token));
        Applications = await httpClient.GetListJsonAsync<List<Application>>("application", new AuthenticationHeaderValue("Bearer", token));
        AnswerList = await httpClient.GetListJsonAsync<List<ApplicantAnswer>>("ApplicantQuestionnaire", new AuthenticationHeaderValue("Bearer", token));
        QuestionList = await httpClient.GetListJsonAsync<List<FormQuestion>>("Questionnaire", new AuthenticationHeaderValue("Bearer", token));
        educations = await httpClient.GetListJsonAsync<List<Education>>("Education", new AuthenticationHeaderValue("Bearer", token));
        marks = await httpClient.GetListJsonAsync<List<matricMarks>>("MatricMark", new AuthenticationHeaderValue("Bearer", token));
        skills = await httpClient.GetListJsonAsync<List<SkillsInformation>>("Skill", new AuthenticationHeaderValue("Bearer", token));
        references = await httpClient.GetListJsonAsync<List<References>>("Reference", new AuthenticationHeaderValue("Bearer", token));
        workHistories = await httpClient.GetListJsonAsync<List<WorkHistory>>("WorkHistory", new AuthenticationHeaderValue("Bearer", token));

        users = await httpClient.GetListJsonAsync<List<AppUser>>("user", new AuthenticationHeaderValue("Bearer", token));
        phasesHelpers = await httpClient.GetListJsonAsync<List<ApplicationPhaseHelper>>("ApplicationPhaseHelper", new AuthenticationHeaderValue("Bearer", token));
        applications = await httpClient.GetListJsonAsync<List<ApplicationModel>>($"Application/job/{JobId}", new AuthenticationHeaderValue("Bearer", token));
        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("ApplicationPhase", new AuthenticationHeaderValue("Bearer", token));
        personalInformation = await httpClient.GetListJsonAsync<List<PersonalInformation>>("PersonalInformation", new AuthenticationHeaderValue("Bearer", token));
        reasons = await httpClient.GetListJsonAsync<List<UnsuccessfulReason>>("UnsuccessfulReason", new AuthenticationHeaderValue("Bearer", token));

        UserDocumentsList = await httpClient.GetListJsonAsync<List<Document>>("Document", new AuthenticationHeaderValue("Bearer", token));

        tempJobTitle = jobs.FirstOrDefault(x => x.Id == JobId).Title;

        userProfilePicture = await httpClient.GetListJsonAsync<List<ProfilePicture>>($"ProfilePicture", new AuthenticationHeaderValue("Bearer", token));
       // userProfilePicture = profilePicStuff.Where(x => x.AppUserId == state.AppUserId).ToList();
    }


    //marker
    private async Task setApplication(int id)
    {
        emailContent = "";
        applicationId = id;

        Application temp = new Application();

        temp = Applications.FirstOrDefault(i => i.Id == applicationId);
        temp.ApplicationPhaseId = phaseId;


        AppUser tempUser = users.FirstOrDefault(x => x.id == temp.AppUserId);



        emailContent = phases.FirstOrDefault(x => x.id == phaseId).EmailTemplate;

        if (emailContent == null)
        {
            emailContent = "";
        }

        emailContent = ConvertEmail(emailContent, tempUser);


        Email.CandidateEmail = tempUser.email;
        Email.CandidateFirstName = tempUser.name;
        Email.CandidateLastName = tempUser.surname;
        Email.Body = emailContent;
        Email.JobName = tempJobTitle;

        await httpClient.PutJsonAsync<Application>($"application/{applicationId}", temp, new AuthenticationHeaderValue("Bearer", token));

        ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
        tempHelper.ApplicationId = applicationId;
        tempHelper.ApplicationPhaseId = phaseId;
        tempHelper.TimeMoved = DateTime.Now;

        await httpClient.PostJsonAsync<ApplicationPhasesHelper>("applicationphasehelper", tempHelper, new AuthenticationHeaderValue("Bearer", token));
    }


    private void updatePhase(ChangeEventArgs e)
    {
        string phaseName = phases.Where(x => x.description.ToLower() == e.Value.ToString().ToLower()).FirstOrDefault().description;


        showEmail = true;


        if(phaseName == "Rejected")
        {
            rejectionEmailHidden = false;
        }
        else
        {
            rejectionId = 0;
            rejectionEmailHidden = true;
        }

        phaseId = phases.Where(x => x.description.ToLower() == e.Value.ToString().ToLower()).FirstOrDefault().id;
    }

    private void SetRejectionReason(ChangeEventArgs e)
    {
        rejectionId = Convert.ToInt32(e.Value);

        Application temp = Applications.FirstOrDefault(x => x.Id == applicationId);
        AppUser tempUser = users.FirstOrDefault(x => x.id == temp.AppUserId);


        emailContent = reasons.FirstOrDefault(x => x.Id == rejectionId).EmailTemplate;

        if (emailContent == null)
        {
            emailContent = "";
        }

        emailContent = ConvertEmail(emailContent, tempUser);

        Email.CandidateEmail = tempUser.email;
        Email.CandidateFirstName = tempUser.name;
        Email.CandidateLastName = tempUser.surname;
        Email.Body = emailContent;
        Email.JobName = tempJobTitle;
    }

    //replaces {fields} with the appropriate data
    public string ConvertEmail(string email, AppUser user)
    {
        if (email != "" && email != null)
        {
            email = email.Replace("{firstname}", user.name);
            email = email.Replace("{surname}", user.surname);

            email = email.Replace("{jobtitle}", tempJobTitle);

            email = email.Replace("{date}", DateTime.Now.ToString("MMM-dd"));
            email = email.Replace("{time}", DateTime.Now.ToString("HH:mm:ss"));

            email = email.Replace("{sentname}", userstate.Name);
            email = email.Replace("{sentsurname}", userstate.Surname);
            email = email.Replace("{senttitle}", userstate.Title);
        }

        return email;
    }

    private async Task SendEmail()
    {
        sendEmailPressed = true;

        Email.Body = emailContent;


        //add error handling here
        await emailClient.PostAsJsonAsync<EmailModel>("https://prod-228.westeurope.logic.azure.com:443/workflows/420f0efb54134f0492fee22869c92bc6/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=GOWFYTIEtt84SYP1ZNP8ZIhoXJeq7S13FjBoYlAGVzE", Email);



        await JSRuntime.InvokeAsync<string>("alert", "Email Sent");

        sendEmailPressed = false;
        showEmail = false;
    }

    private void toggleMagnifiedDocument(string documentType, bool val)
    {
        showMagnifiedDocument = val;
        selectedDocument = documentType;
    }

    private async Task toggleDocuments(AppUser user)
    {
        loadingDocumentInfo = true;
        showDocuments = !showDocuments;
        SetSelectedCandidate(user);
        getUserDoc = new Document();

        foreach (var item in UserDocumentsList)
        {
            if (item.AppUserId == user.id)
            {
                documentsHasBeenAdded = true;
                break;
            }
        }


        if (showDocuments)
        {
            if (documentsHasBeenAdded)
            {
                userDocuments = await httpClient.GetListJsonAsync<List<Document>>($"Document/all/{user.id}", new AuthenticationHeaderValue("Bearer", token));

                checkUserDoc = userDocuments.ToList();
                if (checkUserDoc.Count == 0)
                {
                    noDocuments = true;
                }
                else
                {
                    noDocuments = false;
                    foreach (var item in checkUserDoc)
                    {
                        getUserDoc = item;
                    }
                }
            }
        }
        loadingDocumentInfo = false;
    }

    private void toggleDocuments()
    {
        showDocuments = !showDocuments;
    }

    private void toggleApplicationForm(AppUser user, int jobId)
    {
        showApplicationForm = !showApplicationForm;
        SetSelectedCandidate(user);
    }

    private void toggleApplicationForm()
    {
        showApplicationForm = !showApplicationForm;
    }

    private void toggleAdditionalInformation(AppUser user, int jobId)
    {
        showAdditionalInformation = !showAdditionalInformation;
        SetSelectedCandidate(user);
    }

    private void toggleAdditionalInformation()
    {
        showAdditionalInformation = !showAdditionalInformation;
    }

    private string FindCurrentPhase(int candidateId, int jobId)
    {
        try
        {
            string phaseDescription = "";

            int applicationId = applications.Where(x => x.JobId == jobId && x.AppUserId == candidateId).FirstOrDefault().Id;

            List<ApplicationPhaseHelper> phases_ = phasesHelpers.Where(x => x.ApplicationId == applicationId).ToList();
            phases_ = phases_.OrderByDescending(x => x.TimeMoved).ToList();

            ApplicationPhaseHelper currentPhase = phases_.FirstOrDefault();

            phaseDescription = phases.Where(x => x.id == currentPhase.ApplicationPhaseId).FirstOrDefault().description;

            return phaseDescription;
        }
        catch (NullReferenceException nr)
        {
            return "No Phase";
        }
    }

    private void SetSelectedCandidate(AppUser user)
    {
        if (user != null)
            selectedUser = user;
    }

    private void SearchApplicants(ChangeEventArgs e)
    {
        searchCandidate = e.Value.ToString();

        usersFiltered = new List<AppUser>();
        usersFiltered.Clear();

        if (users != null)
        {
            foreach (var user in users)
            {
                if (user.name != null)
                {
                    if (user.name.ToLower().Contains(searchCandidate.ToLower()))
                    {
                        usersFiltered.Add(user);
                    }
                }
            }
        }
    }

    private string setMatch(double match)
    {
        if (match < 30)
        {
            return "background: rgba(255,0,0,0.6)";
        }
        else if (match <= 40)
        {
            return "background: rgba(255,76,37,0.6)";
        }
        else if (match <= 50)
        {
            return "background: rgba(255,182,90,0.6)";
        }
        else if (match <= 60)
        {
            return "background: rgba(255,223,90,0.6)";
        }
        else if (match <= 70)
        {
            return "background: rgba(224,255,90,0.6)";
        }
        else if (match <= 80)
        {
            return "background: rgba(204,255,90, 0.6)";
        }
        else
        {
            return "background: rgba(204,255,90, 0.6)";
        }
    }



}