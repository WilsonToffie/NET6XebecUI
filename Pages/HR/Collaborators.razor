@using Bogus
@using XebecPortal.UI.Services.Models
@using System.Text
@using XebecPortal.UI.Utils.Handlers;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject CreateJobPost TempJob

<style>

    .collaborators-appform-container {
        height: 55vh;
        width: 70%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
    }

    .collaborators-form {
        width: 100%;
        height: 100%;
    }

    .collaborators-form-title {
        /*height: 15%;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            font-family: opensans-condensed-bold;
            font-size: 2em;
            font-weight: 900;
            color: #004393;
            margin-top: 0.5vh;
            text-transform: uppercase;*/
        text-align: center;
    }

    .collaborators-main-container {
        height: 55vh;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 30px;
    }

    .summary {
        background-color: teal;
        height: 100%;
        width: 30%;
        overflow-y: scroll;
    }

    .select-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .selected-collaborators {
        margin-top: 20px;
        height: 70%;
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        gap: 10px;
        justify-content: space-between;
        padding: 0 50px 0 50px;
        overflow-y: scroll;
    /* padding-left: 55px; */
    /* text-align: center;
        /*display: grid;
            grid-template-columns: repeat(auto-fill,minmax(30%, 1fr));*/
    }

        .selected-collaborators > * {
            flex: 0 0 32%;
        }

    .inner-selected-collaborators {
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        /*        box-shadow: 0 2px 5px 0 rgb(0 0 0 / 20%), 0 2px 10px 0 rgb(0 0 0 / 10%);*/
        box-shadow: 0 3px 3px 3px rgb(0 0 0 / 20%);
        border-radius: 5px;
        min-height: 78px;
        margin: 3px;
        display:flex;
    }

    .collaborator-details {
        display: flex;
        /*justify-content: space-around;*/
        height: 35%;
    }

    .collaborator-select {
        padding: 2px 0px 5px 5px;
        border: solid #00968B;
        border-radius: 5px;
    }

    .crown {
        /*display: flex;
        justify-content: flex-end;
        background: url(/Img/golden-crown-logo.jpg); 
        margin: 5px;
        width: 30px;
        margin-left: 200px;
        position: absolute;*/
        margin: 5px;
        width: 30px;

    }

    .colab-image {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-top: 8px;
        margin-left: 5px;
        object-fit: cover;
    }

    .colab-name {
        width: 70px;
        color: #004392;
        font-weight: 700;
        display: flex;
        margin-left: 10px;
        margin-top: 15px;
    }

    .collab-remove {
        display: flex;
        align-items: center;
        padding-right: 2px;
        object-fit: cover;
    }
    

    .bottom-buttons {
        margin-top: 3vh;
        margin-left: 25% !important;
        position: absolute;
        bottom: 5vh;
    }

    .button-functions {
        margin-top: 3vh;
        height: 5vh;
        width: 10vh;
        border: none;
        border-radius: 1em;
        background-color: rgba(0, 188, 174,1); /*#00bcae;*/
        color: white;
        /*font-family: opensans-bold;*/
        font-weight: 500;
        padding-left: 0.2em;
        padding-right: 0.2em;
    }

        .button-functions:hover {
            background-color: #d35bc9;
        }

        .button-functions:disabled {
            background-color: grey;
        }

    .summary-section {
        color: #004392;
        font-weight: bold;
        text-align: center;
        width: 100%;
    }

    .hiring-lead {
        padding: 10px;
        text-align: center;
    }

    .hiring-lead-heading {
        font-weight: 600;
    }

    .lead-heading-details {
        display: flex;
        justify-content: space-evenly;
        color: #FFFFFF;
    }

    .collaborators-list {
        padding: 10px;
        text-align: center;
    }

    .collab-list-heading {
        font-weight: 600;
    }

    .list-of-collabs {
        display: flex;
        justify-content: space-evenly;
        color: #FFFFFF;
    }

    .crown-position{
        justify-content: flex-end;
        display: flex;

    }

    .image-container{
        width: 50%;
        height: 100%; 
        display: flex; 
        align-items: center; 
        justify-content: center;
    }

</style>


<!--Tables of developers/HR-->
@if (!prevPage && !nextPage)
{
    <div class="top-Image-thing">
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="circle"></div>
        @*<div class="circle"></div>
    <div class="circle"></div>*@
    </div>
    <div class="selected-rod" style="width: 72%;"></div>
    <div class="progress-rod" style="left: 80%; width: 10%;"></div>
    <div class="NumberDisplay">
        <div>1</div>
        <div>2</div>
        <div>3</div>
        <div>4</div>
        <div>5</div>
        @*<div>6</div>
    <div>7</div>*@
    </div>
    <div class="TextDisplay">
        <div class="selected-create-a-job-text-page">Create A Job</div>
        <div class="selected-application-form-text">Build Application Form</div>
        <div class="selected-phases-text">Select Phases</div>
        <div class="selected-collaboration-text">Select Collaboration</div>
        @*<div class="collaboration-text-part-2">Select Collaboration Part 2</div> *@
        <div class="post-a-job-text">Post Job</div>
        @*<div class="summary-text">Summary</div>*@
    </div>
    <div class="create-job-summary">
        <div class="page-title">
            <h1 style="font-size: 38px !important;">Summary</h1>
        </div>

        <div class="summary-details">
            <div class="hiring-lead">
                <p class="hiring-lead-heading">Hiring Lead</p>

                <p class="lead-heading-details">@hiringLead</p>
            </div>
            <div class="collaborators-list">
                <p class="collab-list-heading">Collaborators</p>
                <ul>
                    @foreach (var collab in ListOfCollaborators)
                    {
                        <li class="list-of-collabs">@collab.name  @collab.surname</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="createjob-form-container">
        <div>
            <div>

                <div class="page-title">
                    <h1 style="font-size: 38px !important;">Select Collaborators</h1>
                </div>
                <div class="select-container">
                    <div class="collaborators-select">

                        <select class="collaborator-select" @onchange="AddToCollaborator">
                            <option value="0" selected disabled>Select collaborator</option>
                            @foreach (var colab in AppUserList)
                            {
                                <option>@colab.name </option>
                            }
                        </select>
                    </div>
                    <div class="hiring-lead-select">
                        <select @onchange="TestClick" class="collaborator-select">
                            <option value="0" selected disabled>Select Hiring Lead</option>
                            @foreach (var lead in ListOfCollaborators)
                            {
                                <option value="@lead.id">@lead.name @lead.surname </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="selected-collaborators">
                    @foreach (var collab in ListOfCollaborators)
                    {
                        <div class="inner-selected-collaborators">
                            @*<img src="/Img/golden-crown-logo.jpg" alt="avator" class="crown" />*@
                            @*<div class="collaborator-details">*@
                                @if (string.IsNullOrEmpty(@collab.imageUrl) || onErrorEvent)
                                {
                                    <div class="image-container" >
                                        <img src="@defaultCollaboratorImage" alt="avator" class="colab-image"/> <!---->
                                    </div>
                                    <div style=" width: 105px; display: flex; align-items: center;">                                            
                                            <div>@collab.name @collab.surname</div>
                                             @*<div>@collab.surname</div>*@                                            
                                        @*</div>*@
                                    </div>
                                }
                                else
                                {
                                    <div class="image-container" >
                                        <img src="@collab.imageUrl " alt="avator" class="colab-image" onerror="imageHandling()"/>
                                    </div>
                                    <div style=" width: 105px; display: flex; align-items: center;">
                                        <div>@collab.name  @collab.surname</div>
                                    </div>                                   
                                }                                
                            @*</div>*@
                            <div class="collab-remove">
                                <input type="button" value="Remove" class="default-button-style" @onclick="() => RemoveCollab(collab)" style="margin-top:0px; height:23px;" />
                            </div>
                        </div>
                    }
                    @foreach (var hiringLead in hiringLeads)
                    {
                        <div class="inner-selected-collaborators">                           
                            @*<img src="/Img/golden-crown-logo.jpg" style="width: 30px;" alt="avator" class="crown"/>*@
                            @*<div class="collaborator-details">*@
                                @if (string.IsNullOrEmpty(@hiringLead.imageUrl) || onErrorEvent)
                                {
                                    <div class="image-container" >
                                        <img src="@defaultCollaboratorImage" alt="avator" class="colab-image" />
                                    </div>
                                    <div style=" width: 105px; display: flex; align-items: center;">
                                        <div>@hiringLead.name  @hiringLead.surname</div>
                                    </div>
                                }
                                else
                                {
                                    <div class="image-container" >
                                        <img src="@hiringLead.imageUrl" alt="avator" class="colab-image" onerror="imageHandling()"/>
                                    </div>
                                    <div style=" width: 105px; display: flex; align-items: center;">
                                        <div>@hiringLead.name  @hiringLead.surname</div>
                                    </div>
                                }
                                
                            @*</div>*@
                            <div class="collab-remove" style="display: inline;">
                                <div style=" display: flex; justify-content: end;">
                                    <img src="/Img/golden-crown-logo.jpg" alt="avator" class="crown"/>
                                </div>
                                <input type="button" value="Remove" class="default-button-style" @onclick="() => RemoveLead(hiringLead)" style="margin-top:0px; height:23px;" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="bottom-buttons">
            <input type="button" value="Prev" class="default-button-style" @onclick="Prev" disabled="@savePressed" />
            <input type="button" value="Save" class="default-button-style" @onclick="Save" disabled="@savePressed" />
            <input type="button" value="Next" class="default-button-style" @onclick="Next" disabled="@savePressed" />
        </div>

    </div>

    @*<div class="collaborators-main-container">
            <div class="collaborators-appform-container">
                <div class="collaborators-form">

                    <div class="collaborators-form-title">
                        Select Collaborators
                    </div>
                    <div class="select-container">
                        <div class="collaborators-select">

                            <select class="collaborator-select"  @onchange="AddToCollaborator">
                                <option >Select collaborator</option>
                                @foreach (var colab in AppUserList)
                                {
                                    <option>@colab.name</option>
                                }
                            </select>
                        </div>
                        <div class="hiring-lead-select">
                            <select @onchange="TestClick" class="collaborator-select">
                                <option>Select Hiring Lead</option>
                                @foreach(var lead in ListOfCollaborators)
                                {
                                    <option>@lead.name  @lead.surname </option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="selected-collaborators">
                        @foreach(var collab in ListOfCollaborators)
                    {
                        <div class="inner-selected-collaborators">
                            <div class="crown"><i class="fa-solid fa-crown"></i></div>
                            <div class="collaborator-details">
                                <img src="@collab.imageUrl" alt="avator" class="colab-image" />
                                <div  class="colab-name">
                                    <p>@collab.name</p><p>@collab.surname</p>
                                </div>
                            </div>
                            <div class="collab-remove">
                                <input type="button" value="Remove" class="button-functions" @onclick="() => RemoveCollab(collab)" style="margin-top:0px; height:23px;" />
                            </div>
                        </div>
                    }
                    </div>
                </div>
            </div>
            <div class="summary">
                <div class="summary-heading">
                    <h3>SUMMARY</h3>
                </div>
                <div class="summary-details">
                    <div class="hiring-lead">
                        <p class="hiring-lead-heading">Hiring Lead</p>

                            <p class="lead-heading-details">@hiringLead</p>
                    </div>
                    <div class="collaborators-list">
                        <p class="collab-list-heading">Collaborators</p>
                        <ul>
                            @foreach(var collab in ListOfCollaborators)
                            {
                                <li class="list-of-collabs">@collab.name  @collab.surname</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    *@


}
else if (nextPage)
{
    <XebecPortal.UI.Pages.HR.LinkedInSend />
}
else if (prevPage)
{
    <XebecPortal.UI.Pages.HR.PhaseControlTool />
}

@code {


    private bool savePressed = false;

    private string CurrentItem;
    private List<AppUser> AppUserList = new List<AppUser>();
    private List<CollaboratorsAssigned> collaborators = new List<CollaboratorsAssigned>();
    private List<AppUser> hiringLeads = new List<AppUser>();
    AppUser HiringLead = new();
    Func<AppUser, string> converter = x => x?.name;

    List<AppUser> ListOfCollaborators = new List<AppUser>();
    List<AppUser> HiringLeads = new List<AppUser>();

    private List<AppUser> collaborator = new List<AppUser>();
    private List<string> SelectedUsers = new List<string>();
    public Dictionary<FormQuestion, List<AppUser>> QuestionsDictionary = new Dictionary<FormQuestion, List<AppUser>>();

    public List<AppUser> selected = new List<AppUser>();

    bool nextPage;
    bool prevPage;

    public List<CollaboratorQuestion> CollabQuestions = new List<CollaboratorQuestion>();

    public EventCallback<List<AppUser>> CollaboratorChanged { get; set; }

    int JobId;

    //[Parameter]
    //public int JobId { get; set; }

    //[Parameter]
    //public EventCallback<int> JobIdChanged { get; set; }

    ////our questions
    //[Parameter]
    //public List<FormQuestion> ChosenQuestions { get; set; }

    //[Parameter]
    //public EventCallback<List<FormQuestion>> ChosenQuestionsChanged { get; set; }

    public List<CollaboratorsAssigned> collaboratorsToSave = new List<CollaboratorsAssigned>();
    private List<ProfilePicture> userProfilePicture = new List<ProfilePicture>();
    AppUser currentHiringLead;

    private string defaultCollaboratorImage = "/Img/DefaultImage.png";// "https://xebecstorage.blob.core.windows.net/profile-images/0";

    string token;

    string hiringLead;
    private string profilePicValue = String.Empty;
    private bool onErrorEvent = false;
    protected override async Task OnInitializedAsync()
    {
        onErrorEvent = false;
        //jobId = TempJob.Id;
        JobId = TempJob.Id;

        nextPage = false;
        prevPage = false;

        token = await localStorage.GetItemAsync<string>("jwt_token");

        AppUserList = await HttpClient.GetListJsonAsync<List<AppUser>>("user", new AuthenticationHeaderValue("Bearer", token));
        AppUserList = AppUserList.Where(x => x.role != "Candidate").ToList();

        collaborator = await HttpClient.GetListJsonAsync<List<AppUser>>("collaboratorsassigned", new AuthenticationHeaderValue("Bearer", token));
        collaborator = collaborator.Where(x => x.role == "Collaborator").ToList();

        collaborators = await HttpClient.GetListJsonAsync<List<CollaboratorsAssigned>>("collaboratorsassigned", new AuthenticationHeaderValue("Bearer", token));

        CollabQuestions = await HttpClient.GetListJsonAsync<List<CollaboratorQuestion>>("collaboratorquestion", new AuthenticationHeaderValue("Bearer", token));

        userProfilePicture = await HttpClient.GetListJsonAsync<List<ProfilePicture>>($"ProfilePicture", new AuthenticationHeaderValue("Bearer", token));


    }

    public async Task Save()
    {
        savePressed = true;

        if (ListOfCollaborators != null)
        {

            foreach (var collaborator in ListOfCollaborators)
            {
                CollaboratorsAssigned tempCollab = new()
                    {
                        Name = "Collaborator",
                        AppUserId = collaborator.id,
                        JobId = JobId
                    };
                collaboratorsToSave.Add(tempCollab);
            };

            if (currentHiringLead != null)
            {
                collaboratorsToSave.Find(x => x.AppUserId == currentHiringLead.id).Name = "Hiring Manager";

            }
            foreach (var saved in collaboratorsToSave)
            {
                await HttpClient.PostJsonAsync("collaboratorsassigned", saved, new AuthenticationHeaderValue("Bearer", token));
            };

            //var addcollaborator = await HttpClient.PostJsonAsync("collaboratorsassigned", collaboratorsToSave, new AuthenticationHeaderValue("Bearer", token));




        }

        await jsRuntime.InvokeAsync<string>("alert", "Collaborators added successfully.");

        savePressed = false;
    }


    public async Task AddToCollab(AppUser user)
    {
        //AppUser ques = new CustomQuestion();
        //ListOf .FirstOrDefault(x => e.Value.ToString() == x.questionDescription);

        ListOfCollaborators.Add(user);

    }

    private async Task TestClick(ChangeEventArgs e)
    {
        hiringLeads.Clear();
        int temp = int.Parse(e.Value.ToString());
        currentHiringLead = ListOfCollaborators.FirstOrDefault(x => temp == x.id);

        hiringLead = currentHiringLead.name + " " + currentHiringLead.surname;
        hiringLeads.Add(currentHiringLead);
    }

    private void Prev()
    {
        prevPage = true;
    }

    private void Next()
    {
        //this should probably also save, or alert the user that changes are not saved
        nextPage = true;
    }

    public async Task AddToCollaborator(ChangeEventArgs e)
    {
        AppUser collab = new AppUser();
        collab = AppUserList.FirstOrDefault(x => e.Value.ToString() == x.name);
        //string x = e.Value.ToString();

        AppUser temp = new AppUser();
        temp.id = collab.id;
        temp.email = collab.email;
        temp.role = collab.role;
        temp.passwordhash = collab.passwordhash;
        temp.name = collab.name;
        temp.surname = collab.surname;
        temp.registered = collab.registered;
        temp.linkVisits = collab.linkVisits;
        foreach (var item in userProfilePicture)
        {
            if (item.AppUserId == temp.id)
            {
                temp.imageUrl = item.profilePic;

                break;
            }            
        }
        Console.WriteLine("Image url value: " + temp.imageUrl);
        ListOfCollaborators.Add(temp);
        await CollaboratorChanged.InvokeAsync(AppUserList);

        Console.WriteLine("Check");

    }

    public async Task AddHiringLead(ChangeEventArgs e)
    {
        AppUser Lead = new AppUser();
        Lead = AppUserList.FirstOrDefault(x => e.Value.ToString() == x.name);

        AppUser temp = new AppUser();
        temp.id = Lead.id;
        temp.email = Lead.email;
        temp.role = Lead.role;
        temp.passwordhash = Lead.passwordhash;
        temp.name = Lead.name;
        temp.surname = Lead.surname;
        temp.registered = Lead.registered;
        temp.linkVisits = Lead.linkVisits;
        foreach (var item in userProfilePicture)
        {
            Console.WriteLine("Gets into the foreach");
            if (item.AppUserId == temp.id)
            {
                temp.imageUrl = item.profilePic;
                break;
            }            
        }

        Console.WriteLine("Image url value for hirin lead: " + temp.imageUrl);
        HiringLeads.Add(temp);
        await CollaboratorChanged.InvokeAsync(AppUserList);


    }

    private void RemoveCollab(AppUser user)
    {
        ListOfCollaborators.RemoveAll(q => q.id == user.id);

    }

    private void RemoveLead(AppUser user)
    {
        hiringLeads.RemoveAll(q => q.id == user.id);

    }

    public async Task ChangeColor(ChangeEventArgs e)
    {
        string color = "crown";

    }


    private string getUserProfilePic(int appUserId)
    {
        Console.WriteLine("THis method does get called");
        foreach (var item in userProfilePicture)
        {
            if (item.AppUserId == appUserId)
            {
                profilePicValue = item.profilePic;
                break;
            }            
        }
        return profilePicValue;
    }

    private async Task imageHandling()
    {
        onErrorEvent = true;
        await jsRuntime.InvokeAsync<string>("alert", "Error at loading user images, default image will be used!");
    }
}