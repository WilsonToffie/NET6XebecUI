@using System.Net.Http.Headers;
@using XebecPortal.UI.Utils.Handlers;
@inject HrJobState hrJobState
@inject HttpClient httpClient
@inject UserState userstate
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .phase-manager-container {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .page-top-select-job {
        height: 5vh;
        width: 100%;
        margin-bottom: 2.5vh;
        display: flex;
        justify-content: center;
    }

    .phase-container {
        width: 190px;
        max-height: 75%;
        background-color: white;
        border-radius: 20px;
        overflow-y: auto;
        overflow-x: hidden;
        display: flex;
        justify-content: center;
    }

    .phase-title {
        background-color: #00BCAE;
        text-align: center;
        height: 30px;
        width: 100%;
        margin-bottom: 5px;
        align-items: center;
    }

    .jobs-container {
        display: flex;
        justify-content: space-evenly;
        width: 90%;
    }

    .job-status {
        display: flex;
        flex-direction: column;
        width: 100%;
        background-color: white;
        height: 400px;
        max-height: 400px;
    }

        .job-status ul {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            display: block;
            justify-content: center;
            margin-left: 8%;
        }

    .can-drop {
        border: 2px dashed #00BCAE;
        box-shadow: 3px 3px 10px #00BCAE;
    }

    .draggable {
        margin-bottom: 5px;
        border: 1px solid #00BCAE;
        cursor: grab;
        background: lightgrey;
        color: black;
        border-radius: 8px;
        width: 160px;
        height: 65px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .draggable-edit {
        width: 15%;
        height: 100%;
        border-radius: 8px;
        display: block;
        justify-content: center;
    }

    .draggable-content {
        width: 50%;
        height: 100%;
        border-radius: 8px;
        font-family: opensans-light;
        display: flex;
        align-items: center;
        word-wrap: break-word;
    }

    .draggable-picture {
        width: 35%;
        height: 100%;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .draggable:hover:active {
        cursor: grabbing;
        background-color: #00BCAE;
    }

    .draggable:hover {
        background-color: #F0F0F0;
    }

    .drag-item-text {
        font-family: opensans-light;
        margin-left: 5px;
    }

    .mydialog {
        width: 350px;
        height: 400px;
        background-color: white;
        border-radius: 12px;
    }

    .mydialog-final {
        width: 300px;
        height: 200px;
        background-color: white;
        border-radius: 12px;
    }

    .mydialog-final-title {
        width: 100%;
        height: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: opensans-bold;
        font-size: 1em;
        color: black;
        text-align: center;
    }

    .mydialog-final-body {
        width: 100%;
        height: 25%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .mydialog-final-button {
        width: 100%;
        height: 25%;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
    }

    .mydialog-title {
        height: 10%;
        width: 100%;
        display: flex;
        align-items: center;
        font-size: 15px;
        font-family: opensans-bold;
        color: black;
    }

    .mydialog-title-heading {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80%;
    }

    .mydialog-title-close {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 10%;
    }

    .screening-dialog-body {
        height: 35%;
        width: 100%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .screening-dialog-textarea {
        width: 100%;
        height: 40%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .screening-dialog-email {
        height: 10%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: opensans-condensed-bold;
        font-weight: 800;
    }

    .dialog-email-address {
        display: flex;
        align-items: center;
        width: 80%;
    }

    .dialog-email-send-button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 10%;
    }

    .email-button {
        position: absolute;
        top: 90%;
        left: 65%;
    }


    .mycard {
        width: 100px;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #00BCAE;
        color: white;
        font-size: 1em;
        font-family: opensans-condensed-bold;
        text-align: center;
        border-radius: 12px;
    }

    .edit-icon {
        color: black;
        font-size: 1em;
        text-align: center;
        cursor: pointer;
    }

        .edit-icon:hover {
            color: #d35bc9;
        }

    .email-icon {
        color: #00BCAE;
        font-size: 1em;
        text-align: center;
        cursor: pointer;
    }

        .email-icon:hover {
            color: #d35bc9;
        }

    .email-sent-icon {
        color: #00BCAE;
        font-size: 1em;
        text-align: center;
    }

    .currentphase {
        background: #d35bc9;
    }

    .active-phase {
        color: white;
        font-family: opensans-bold;
    }

    .phase-manager-textarea {
        border-radius: 5px;
        border: 1px solid grey;
        background-color: white;
        width: 320px;
        height: 150px;
        padding: 5px;
    }

    .profile-picture {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        border: 1px solid #00BCAE;
    }

    .invalid-email {
        border: 1px solid red;
    }

    .invalid-email-text {
        width: 100%;
        height: 5%;
        color: red;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: opensans-bold;
    }

    .hr-job-search-bar-input {
        padding-left: 3em;
        background-color: white;
        height: 6vh;
        width: 100%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 rgba(0,0,0,0.2);
        border: white solid 0.1em;
    }



        .hr-job-search-bar-input::placeholder {
            color: #666666;
            font-family: opensans-condensed-bold;
        }



        .hr-job-search-bar-input:hover {
            border-radius: 1em;
            border: 0.1em solid black;
        }
</style>


@*<div class="page-top-select-job">
    <div class="hr-job-search-bar">
        <input class="hr-job-search-bar-input" type="text" placeholder="Search Applicants" @bind-value="searchTerm" @bind-value:event="oninput" />
    </div>
</div>*@

<div class="myjob-search-bar d-flex justify-content-center" >
    <input class="search-image hr-job-search-bar-input" style="padding-left: 2.5em; width: 30%;" type="text" placeholder="Search Applicants" @bind-value="searchTerm" @bind-value:event="oninput" />
</div>

<div class="phase-manager-container">

    @if (LoadingDialog)
    {
        <MudProgressCircular Color="Color.Primary" Style="height:140px;width:140px;" Indeterminate="true" />
    }
    else if (LoadingError)
    {
        <div class="jobs-container">
            <h1>An error occured, please reload the page.</h1>
        </div>
    }
    else if (NoApplicants)
    {
        <div class="jobs-container">
            <h1>There are no applicants for this job.</h1>
        </div>
    }
    else
    {
        <div class="jobs-container">

            @if (TotalPhases.Contains(1))
            {
                <div class="phase-container shadow @AppliedDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Applied</h5>
                        </div>

                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(1)'
                            @ondragenter='() => HandleDragEnter(1)'
                            @ondragleave="() => HandleDragLeave(1)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId == 1)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }

            @if (TotalPhases.Exists(x => x is 10 or 3 or 5 or 25))
            {
                <div class="phase-container shadow @ScreeningDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Screening</h5>
                        </div>


                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(10)'
                            @ondragenter='() => HandleDragEnter(10)'
                            @ondragleave="() => HandleDragLeave(10)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId is 3 or 5 or 25 or 10)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                            @if (item.ApplicationPhaseId == 10)
                                            {
                                                <span title="No phase selected">
                                                    <i class="fa fa-question-circle edit-icon"></i>
                                                </span>
                                            }

                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }

            @if (TotalPhases.Contains(27))
            {
                <div class="phase-container shadow @AssessmentDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Assessment</h5>
                        </div>


                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(27)'
                            @ondragenter='() => HandleDragEnter(27)'
                            @ondragleave="() => HandleDragLeave(27)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId == 27)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }


            @if (TotalPhases.Exists(x => x is 11 or 26 or 28 or 29 or 30 or 31))
            {
                <div class="phase-container shadow @InterviewDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Interview</h5>
                        </div>

                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(11)'
                            @ondragenter='() => HandleDragEnter(11)'
                            @ondragleave="() => HandleDragLeave(11)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31 or 11)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                            @if (item.ApplicationPhaseId == 11)
                                            {
                                                <span title="No phase selected">
                                                    <i class="fa fa-question-circle edit-icon"></i>
                                                </span>
                                            }
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }

            @if (TotalPhases.Contains(32))
            {
                <div class="phase-container shadow @ReferenceDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Reference Check</h5>
                        </div>


                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(32)'
                            @ondragenter='() => HandleDragEnter(32)'
                            @ondragleave="() => HandleDragLeave(32)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId == 32)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }

            @if (TotalPhases.Exists(x => x is 12 or 33 or 34 or 35))
            {
                <div class="phase-container shadow @OfferDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Offer</h5>
                        </div>


                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(12)'
                            @ondragenter='() => HandleDragEnter(12)'
                            @ondragleave="() => HandleDragLeave(12)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId is 33 or 34 or 35 or 12)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                            @if (item.ApplicationPhaseId == 12)
                                            {
                                                <span title="No phase selected">
                                                    <i class="fa fa-question-circle edit-icon"></i>
                                                </span>
                                            }
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }

            @if (TotalPhases.Exists(x => x is 13 or 36))
            {
                <div class="phase-container shadow @FinalDrop">
                    <div class="job-status">
                        <div class="phase-title">
                            <h5 class="active-phase">Hired/Not Hired</h5>
                        </div>


                        <ul class="dropzone"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop='() => HandleDrop(13)'
                            @ondragenter='() => HandleDragEnter(13)'
                            @ondragleave="() => HandleDragLeave(13)">

                            @foreach (var item in FilteredItems.OrderBy(x => x.Name))
                            {
                                @if (item.ApplicationPhaseId is 36 or 13)
                                {
                                    <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                        <div class="draggable-picture">
                                            <img class="profile-picture" src="@item.Picture" />
                                        </div>
                                        <div class="draggable-content">
                                            <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                        </div>
                                        <div class="draggable-edit">
                                            <span @onclick='() => ShowDialog(item)'>
                                                <i class="fas fa-edit edit-icon"></i>
                                            </span>
                                            @if (item.ApplicationPhaseId == 13)
                                            {
                                                <span title="No phase selected">
                                                    <i class="fa fa-question-circle edit-icon"></i>
                                                </span>
                                            }
                                        </div>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>
            }


        </div>
    }




    <MatDialog @bind-IsOpen="@ScreeningDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Screening</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { ScreeningDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(3))
                {
                    <div class=" shadow mycard @ScreeningOne" @onclick="() => MovePhase(3)"><b>Schedule Phone Screen</b></div>
                }
                @if (TotalPhases.Contains(5))
                {
                    <div class=" shadow mycard @ScreeningTwo" @onclick="() => MovePhase(5)"><b>Phone Screened</b></div>
                }
                @if (TotalPhases.Contains(25))
                {
                    <div class=" shadow mycard @ScreeningThree" @onclick="() => MovePhase(25)"><b>MS Teams Meeting</b></div>
                }
            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@AssessmentDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Assessment</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { AssessmentDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body">
                @*<input type="number" placeholder="0" style="width: 160px; height: 80px; font-size: 70px;" min="0" max="100" />*@
                <i class="fa fa-exclamation-triangle" style="font-size: 80px;"></i>
                <p>Feature in progress.</p>
            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@InterviewDialogIsOpen">
        <div class="mydialog" style="width: 550px">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Interview</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { InterviewDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(26))
                {
                    <div class=" shadow mycard @InterviewOne" @onclick="() => MovePhase(26)"><b>First Round</b></div>
                }
                @if (TotalPhases.Contains(28))
                {
                    <div class=" shadow mycard @InterviewTwo" @onclick="() => MovePhase(28)"><b>Second Round</b></div>
                }
                @if (TotalPhases.Contains(29))
                {
                    <div class=" shadow mycard @InterviewThree" @onclick="() => MovePhase(29)"><b>Manager Feedback</b></div>
                }
                @if (TotalPhases.Contains(30))
                {
                    <div class=" shadow mycard @InterviewFour" @onclick="() => MovePhase(30)"><b>CTO/MD</b></div>
                }
                @if (TotalPhases.Contains(31))
                {
                    <div class=" shadow mycard @InterviewFive" @onclick="() => MovePhase(31)"><b>CEO</b></div>
                }
            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address" style="width: 52.2%;">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button" style="width: 5.8%;">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@ReferenceCheckDialogIsOpen">
        <div class="mydialog" style="height: 300px;">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Reference Check</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { ReferenceCheckDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body" style="height: 20px;">

            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea" style="margin-top: 50px;">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@OfferDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Offer</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { OfferDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(33))
                {
                    <div class=" shadow mycard @OfferOne" @onclick="() => MovePhase(33)"><b>Send Offer</b></div>
                }
                @if (TotalPhases.Contains(34))
                {
                    <div class=" shadow mycard @OfferTwo" @onclick="() => MovePhase(34)"><b>Offer Pending - Candidate</b></div>
                }
                @if (TotalPhases.Contains(35))
                {
                    <div class=" shadow mycard @OfferThree" @onclick="() => MovePhase(35)"><b>Offer Pending - Second Opinion</b></div>
                }
            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@HiredDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <div class="mydialog-title-close">

                </div>
                <div class="mydialog-title-heading">
                    <b>Successful/Unsuccessful</b>
                </div>
                <div class="mydialog-title-close">
                    <i class="fa fa-times edit-icon" @onclick="() => { HiredDialogIsOpen = false; }"></i>
                </div>

            </div>
            <div class="screening-dialog-body">
                <div class=" shadow mycard @Hired" @onclick="() => Confirm(true)"><b>Hired</b></div>
                <div class=" shadow mycard @NotHired" @onclick="() => Confirm(false)"><b>Not Hired</b></div>
            </div>
            <div class="invalid-email-text">
                <p hidden="@EmailInvalid">Invalid Email</p>
            </div>
            <div class="screening-dialog-email">
                <div class="dialog-email-address">
                    Send to:
                    <input type="email" style="width: 75%; margin-left: 5px;" @bind="CurrentEmailRecipient" class="@EmailInvalidAlert rounded" />
                </div>
                <div class="dialog-email-send-button">
                    @if (EmailSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailSent)
                    {
                        <i class="fas fa-check email-sent-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <span @onclick="SendEmail">
                            <i class="fas fa-paper-plane email-icon" style="font-size: 20px;"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@SuccessfulDialog">
        <div class="mydialog-final">
            <div class="mydialog-final-title">
                <p>Are you sure you want to hire?</p>
            </div>
            <div class="mydialog-final-body">

            </div>
            <div class="mydialog-final-button">
                <button class="btn" style="background-color: white; border: 1px solid black" @onclick="() => MovePhase(36)">Confirm</button>
                <button class="btn" style="background-color: white; border: 1px solid black" @onclick="() => { SuccessfulDialog = false; }">Cancel</button>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@UnsuccessfulDialog">
        <div class="mydialog-final">
            <div class="mydialog-final-title">
                <p>Please select why the user was unsuccessful:</p>
            </div>
            <div class="mydialog-final-body">
                <select @bind="tempReasonId" class="form-select" style="width: 80%;">
                    @foreach (var reason in Unsuccessful)
                    {
                        <option value="@reason.Id" selected>@reason.Reason</option>
                    }
                </select>
            </div>
            <div class="mydialog-final-button">
                <button class="btn" style="background-color: white; border: 1px solid black" @onclick="Reject">Confirm</button>
                <button class="btn" style="background-color: white; border: 1px solid black" @onclick="() => { UnsuccessfulDialog = false; }">Cancel</button>
            </div>
        </div>
    </MatDialog>






@*    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasFilter">
        <div class="offcanvas-header-alert offcanvas-header-color1">
            <div style="padding: 2em 0em 0em 2em">
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
        </div>
        <div class="align-items-center">
            <p class="configure-alerts-heading">Filter</p>
        </div>
        <div class="offcanvas-body p-5 pt-0 d-grid gap-5">
            <div class="col-12">
                <!--Location-->
                <MudSelect T="string" Class="form-control hr-jobportal-mudselect rounded-pill" DisableUnderLine="true" AnchorOrigin="Origin.BottomCenter"  MultiSelection="true" FullWidth="true"  Label="Job Title" SelectedValuesChanged="SearchListTitle">
                    @if (FilteredItems?.Any() == true)
                    {
                        @foreach (var item in Items.Select(x => x.JobTitle).OrderBy(x => x).Distinct())
                        {
                            <MudSelectItem T="string" Value="item">@item</MudSelectItem>
                        }

                    }
                </MudSelect>
            </div>
            <div class="col-12">
                <!--Company-->
                <MudSelect T="string" Class="form-control hr-jobportal-mudselect rounded-pill" DisableUnderLine="true" Style="cursor:pointer" AnchorOrigin="Origin.BottomCenter" SelectAll="true" SelectAllText="Select All Companies" MultiSelection="true" MultiSelectionTextFunc="new Func<List<string>, string>(GetMultiSelectionTextCompany)" Label="Company" SelectedValuesChanged="SearchListCompany">
                    @if (jobListFilter?.Any() == true)
                    {
                        @foreach (var item in jobList.Select(x => x.Company).OrderBy(x => x).Distinct())
                        {
                            <MudSelectItem T="string" Value="item">@item</MudSelectItem>
                        }

                    }
                </MudSelect>
            </div>
            <div class="col-12">
                <!--Department-->
                <MudSelect T="int" Class="form-control hr-jobportal-mudselect rounded-pill" DisableUnderLine="true" Style="cursor:pointer" AnchorOrigin="Origin.BottomCenter" SelectAll="true" SelectAllText="Select All Departments" MultiSelection="true" MultiSelectionTextFunc="new Func<List<string>, string>(GetMultiSelectionTextDepartment)" Label="Department" SelectedValuesChanged="SearchListDepartment">
                    @if (jobListFilter?.Any() == true)
                    {
                        @foreach (var item in departments)
                        {
                            <MudSelectItem T="int" Value="item.Id">@item.Name</MudSelectItem>
                        }

                    }
                </MudSelect>
            </div>
            <div class="col-12">
                <!--Status-->
                <MudSelect T="string" Class="form-control hr-jobportal-mudselect rounded-pill" DisableUnderLine="true" Style="cursor:pointer" AnchorOrigin="Origin.BottomCenter" SelectAll="true" SelectAllText="Select All Status" MultiSelection="true" MultiSelectionTextFunc="new Func<List<string>, string>(GetMultiSelectionTextStatus)" Label="Status" SelectedValuesChanged="SearchListStatus">
                    @if (jobListFilter?.Any() == true)
                    {
                        @foreach (var item in status.Select(x => x.name))
                        {
                            <MudSelectItem T="string" Value="item">@item</MudSelectItem>
                        }

                    }
                </MudSelect>
            </div>
        </div>
    </div>

    <div class="col-1 d-flex justify-content-end pb-5" style="height: 45em !important">
        <div style="padding-top: 3em">
            <button class="detail-button-colour filter-button-trans rounded-pill" type="button" style="width: 8em; height: 3em" data-bs-toggle="offcanvas" data-bs-target="#offcanvasFilter">Filters</button>
        </div>
    </div>*@

</div>



@code {

    //parameter jobid
    //[Parameter]
    //public int JobId { get; set; }

    public ApplicationPhaseItem CurrentItem;

    public string searchTerm = "";
    public int tempReasonId = -1;
    public string CurrentEmailRecipient = "";
    public string CurrentEmailTemplate = "";

    //invalid email styling
    string EmailInvalidAlert = "";
    bool EmailInvalid = true;

    //Email button
    bool EmailSending = false;
    bool EmailSent = false;

    //try catch
    bool LoadingError = false;
    bool NoApplicants = false;

    //which phases the page will display
    List<int> TotalPhases = new List<int>() { 1, 10, 11, 12, 13, 36, 3, 5, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35};

    //tables we need
    List<ApplicationPhase> AppPhases = new List<ApplicationPhase>();
    List<AppUser> tempAppUsers = new List<AppUser>();
    List<UnsuccessfulReason> Unsuccessful = new List<UnsuccessfulReason>();
    List<RejectedCandidate> RejectedUsers = new List<RejectedCandidate>();
    List<Job> AllJobs = new List<Job>();




    //filtered output
    List<Application> CurrentApplications;

    //list for draggable items
    List<ApplicationPhaseItem> Items = new List<ApplicationPhaseItem>();

    //list for filtered items
    List<ApplicationPhaseItem> FilterItems = new List<ApplicationPhaseItem>();


    //not sure we will need a search anymore?
    List<ApplicationPhaseItem> FilteredItems => FilterItems.Where(item => item.Name.ToLower().Contains(searchTerm.ToLower()) || item.Surname.ToLower().Contains(searchTerm.ToLower())).ToList();



    //dialogs
    bool ScreeningDialogIsOpen = false;
    bool AssessmentDialogIsOpen = false;
    bool InterviewDialogIsOpen = false;
    bool ReferenceCheckDialogIsOpen = false;
    bool OfferDialogIsOpen = false;
    bool HiredDialogIsOpen = false;
    bool SuccessfulDialog = false;
    bool UnsuccessfulDialog = false;
    bool LoadingDialog = true;

    //css borders
    string AppliedDrop = "";
    string ScreeningDrop = "";
    string AssessmentDrop = "";
    string InterviewDrop = "";
    string ReferenceDrop = "";
    string OfferDrop = "";
    string FinalDrop = "";

    //dialog subphases
    string ScreeningOne = "";
    string ScreeningTwo = "";
    string ScreeningThree = "";

    string InterviewOne = "";
    string InterviewTwo = "";
    string InterviewThree = "";
    string InterviewFour = "";
    string InterviewFive = "";

    string OfferOne = "";
    string OfferTwo = "";
    string OfferThree = "";

    string Hired = "";
    string NotHired = "";


    string token;


    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("jwt_token");

        try
        {

            tempAppUsers = await httpClient.GetListJsonAsync<List<AppUser>>("user", new AuthenticationHeaderValue("Bearer", token));
            AppPhases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("applicationphase", new AuthenticationHeaderValue("Bearer", token));
            Unsuccessful = await httpClient.GetListJsonAsync<List<UnsuccessfulReason>>("unsuccessfulreason", new AuthenticationHeaderValue("Bearer", token));
            RejectedUsers = await httpClient.GetListJsonAsync<List<RejectedCandidate>>("rejectedcandidate", new AuthenticationHeaderValue("Bearer", token));
            AllJobs = await httpClient.GetListJsonAsync<List<Job>>("job", new AuthenticationHeaderValue("Bearer", token));



            CurrentApplications = await httpClient.GetListJsonAsync<List<Application>>($"application", new AuthenticationHeaderValue("Bearer", token));

            if (AllJobs.Count>0)
            {
                Items.Clear();
                FilteredItems.Clear();

                foreach (var application in CurrentApplications)
                {
                    ApplicationPhaseItem temp = new ApplicationPhaseItem();
                    temp.Id = application.Id;
                    temp.ApplicationId = application.Id;
                    temp.Name = tempAppUsers.First((x) => x.id == application.AppUserId).name;
                    temp.Surname = tempAppUsers.First((x) => x.id == application.AppUserId).surname;
                    temp.Email = tempAppUsers.First((x) => x.id == application.AppUserId).email;
                    temp.Picture = tempAppUsers.First((x) => x.id == application.AppUserId).imageUrl;


                    //this is temporary
                    temp.JobTitle = AllJobs.First(x => x.Id == application.JobId).Title;
                    temp.JobId = AllJobs.First(x => x.Id == application.JobId).Id;

                    //temp.JobDepartment = AllJobs.First(x => x.Id == application.JobId).DepartmentId;

                    temp.ApplicationPhaseId = CurrentApplications.First((x) => x.Id == temp.ApplicationId).ApplicationPhaseId;

                    Items.Add(temp);
                }

                FilterItems = Items;


                if (FilteredItems.Count != 0)
                {
                    LoadingDialog = false;
                }
                else
                {
                    LoadingDialog = false;
                    NoApplicants = true;
                }
            }


        }
        catch
        {
            LoadingError = true;
        }
    }




    private void HandleDragEnter(int applicationPhase)
    {
        if (applicationPhase == 1)
        {
            AppliedDrop = "can-drop";
        }
        if (applicationPhase == 10)
        {
            ScreeningDrop = "can-drop";
        }
        if (applicationPhase == 27)
        {
            AssessmentDrop = "can-drop";
        }
        if (applicationPhase == 11)
        {
            InterviewDrop = "can-drop";
        }
        if (applicationPhase == 32)
        {
            ReferenceDrop = "can-drop";
        }
        if (applicationPhase == 12)
        {
            OfferDrop = "can-drop";
        }
        if (applicationPhase == 13)
        {
            FinalDrop = "can-drop";
        }
    }

    private void HandleDragLeave(int applicationPhase)
    {
        AppliedDrop = "";
        ScreeningDrop = "";
        AssessmentDrop = "";
        InterviewDrop = "";
        ReferenceDrop = "";
        OfferDrop = "";
        FinalDrop = "";
    }

    private async Task HandleDrop(int phase)
    {
        ScreeningOne = "";
        ScreeningTwo = "";
        ScreeningThree = "";

        InterviewOne = "";
        InterviewTwo = "";
        InterviewThree = "";
        InterviewFour = "";
        InterviewFive = "";

        OfferOne = "";
        OfferTwo = "";
        OfferThree = "";

        Hired = "";
        NotHired = "";

        AppliedDrop = "";
        ScreeningDrop = "";
        AssessmentDrop = "";
        InterviewDrop = "";
        ReferenceDrop = "";
        OfferDrop = "";
        FinalDrop = "";

        CurrentEmailTemplate = "";
        CurrentEmailRecipient = CurrentItem.Email;


        if (phase == CurrentItem.ApplicationPhaseId) return;

        if (phase == 10)
        {
            if (CurrentItem.ApplicationPhaseId is 3 or 5 or 25) return;
            ScreeningDialogIsOpen = true;
        }
        if (phase == 11)
        {
            if (CurrentItem.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31) return;
            InterviewDialogIsOpen = true;
        }
        if (phase == 12)
        {
            if (CurrentItem.ApplicationPhaseId is 33 or 34 or 35) return;
            OfferDialogIsOpen = true;
        }
        if (phase is 36 or 13)
        {
            if (CurrentItem.ApplicationPhaseId is 36) return;
            HiredDialogIsOpen = true;
        }

        await UpdateJobAsync(phase);

    }

    private void HandleDragStart(ApplicationPhaseItem selectedItem)
    {
        CurrentItem = selectedItem;
        CurrentEmailRecipient = CurrentItem.Email;
    }

    public async Task UpdateJobAsync(int phase)
    {
        CurrentItem.ApplicationPhaseId = phase;

        var task = Items.SingleOrDefault(x => x.Id == CurrentItem.Id);

        if (phase is 10 or 11 or 12 or 13 && task != null)
        {
            task.ApplicationPhaseId = phase;
            return;
        }

        if (task != null)
        {
            task.ApplicationPhaseId = phase;

            Application temp = new Application();

            temp = CurrentApplications.Single(i => i.Id == CurrentItem.ApplicationId);
            temp.ApplicationPhaseId = phase;

            await httpClient.PutJsonAsync<Application>($"application/{CurrentItem.ApplicationId}", temp, new AuthenticationHeaderValue("Bearer", token));

            ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
            tempHelper.ApplicationId = CurrentItem.ApplicationId;
            tempHelper.ApplicationPhaseId = phase;
            tempHelper.TimeMoved = DateTime.Now;

            await httpClient.PostJsonAsync<ApplicationPhasesHelper>("applicationphasehelper", tempHelper, new AuthenticationHeaderValue("Bearer", token));

            HrEmailModel test = new HrEmailModel();
            test.CandidateName = CurrentItem.Name;
            test.CandidateSurname = CurrentItem.Surname;
            test.AuthorizerEmail = userstate.Email;
            test.Phase = AppPhases.FirstOrDefault(x => x.id == CurrentItem.ApplicationPhaseId).description;
            test.Job = CurrentItem.JobTitle;
            test.DateTime = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");

            //Not sure if this needs to be done
            await httpClient.PostAsJsonAsync<HrEmailModel>("https://prod-68.westeurope.logic.azure.com:443/workflows/26a113fe926648e795fa4feda3fa611f/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=F5kfz52-z0loxc0VL-CQ8Tdg6DRfMo0xkKACdb22GJA", test);
        }
    }

    public void ShowDialog(ApplicationPhaseItem item)
    {
        CurrentItem = item;
        CurrentEmailRecipient = CurrentItem.Email;

        EmailSent = false;
        EmailInvalid = true;

        EmailInvalidAlert = "";

        ScreeningOne = "";
        ScreeningTwo = "";
        ScreeningThree = "";

        InterviewOne = "";
        InterviewTwo = "";
        InterviewThree = "";
        InterviewFour = "";
        InterviewFive = "";

        OfferOne = "";
        OfferTwo = "";
        OfferThree = "";

        Hired = "";
        NotHired = "";


        if (item.ApplicationPhaseId is 3 or 5 or 25 or 10)
        {
            ScreeningDialogIsOpen = true;

            if (item.ApplicationPhaseId == 3)
            {
                ScreeningOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 3).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 5)
            {
                ScreeningTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 5).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 25)
            {
                ScreeningThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 25).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId == 27)
        {
            AssessmentDialogIsOpen = true;
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 27).EmailTemplate);
        }

        else if (item.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31 or 11)
        {
            InterviewDialogIsOpen = true;

            if (item.ApplicationPhaseId == 26)
            {
                InterviewOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 26).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 28)
            {
                InterviewTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 28).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 29)
            {
                InterviewThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 29).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 30)
            {
                InterviewFour = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 30).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 31)
            {
                InterviewFive = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 31).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId == 32)
        {
            ReferenceCheckDialogIsOpen = true;
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 32).EmailTemplate);
        }

        else if (item.ApplicationPhaseId is 33 or 34 or 35 or 12)
        {
            OfferDialogIsOpen = true;

            if (item.ApplicationPhaseId == 33)
            {
                OfferOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 33).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 34)
            {
                OfferTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 34).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 35)
            {
                OfferThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 35).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId is 36 or 13)
        {
            HiredDialogIsOpen = true;

            if (item.ApplicationPhaseId == 36)
            {
                if (RejectedUsers.Exists(x => x.ApplicationId == CurrentItem.ApplicationId))
                {
                    NotHired = "currentphase";
                }
                else
                {
                    Hired = "currentphase";
                    CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 36).EmailTemplate);
                }
            }
        }

    }

    public async Task MovePhase(int i)
    {
        ScreeningOne = "";
        ScreeningTwo = "";
        ScreeningThree = "";

        InterviewOne = "";
        InterviewTwo = "";
        InterviewThree = "";
        InterviewFour = "";
        InterviewFive = "";

        OfferOne = "";
        OfferTwo = "";
        OfferThree = "";

        Hired = "";
        NotHired = "";


        if (i == 3)
        {
            ScreeningOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 3).EmailTemplate);
        }
        else if (i == 5)
        {
            ScreeningTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 5).EmailTemplate);
        }
        else if (i == 25)
        {
            ScreeningThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 25).EmailTemplate);
        }
        else if (i == 26)
        {
            InterviewOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 26).EmailTemplate);
        }
        else if (i == 28)
        {
            InterviewTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 28).EmailTemplate);
        }
        else if (i == 29)
        {
            InterviewThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 29).EmailTemplate);
        }
        else if (i == 30)
        {
            InterviewFour = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 30).EmailTemplate);
        }
        else if (i == 31)
        {
            InterviewFive = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 31).EmailTemplate);
        }
        else if (i == 33)
        {
            OfferOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 32).EmailTemplate);
        }
        else if (i == 34)
        {
            OfferTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 33).EmailTemplate);
        }
        else if (i == 35)
        {
            OfferThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 34).EmailTemplate);
        }
        else if (i == 36)
        {
            if (RejectedUsers.Exists(x => x.ApplicationId == CurrentItem.ApplicationId))
            {
                NotHired = "currentphase";
            }
            else
            {
                Hired = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 36).EmailTemplate);




                //this will change when we are back to one jobid
                Job FilledJob = await httpClient.GetListJsonAsync<Job>($"job/{CurrentItem.JobId}", new AuthenticationHeaderValue("Bearer", token));
                FilledJob.Status = "Filled";

                await httpClient.PutJsonAsync<Job>($"job/{FilledJob.Id}", FilledJob, new AuthenticationHeaderValue("Bearer", token));
            }
        }

        var task = Items.SingleOrDefault(x => x.Id == CurrentItem.Id);

        CurrentItem.ApplicationPhaseId = i;

        EmailInvalidAlert = "";

        if (task != null)
        {
            Application temp = new Application();

            temp = CurrentApplications.Single(i => i.Id == CurrentItem.ApplicationId);
            temp.ApplicationPhaseId = i;

            await httpClient.PutJsonAsync<Application>($"application/{CurrentItem.ApplicationId}", temp, new AuthenticationHeaderValue("Bearer", token));
        }


        ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
        tempHelper.ApplicationId = CurrentItem.ApplicationId;
        tempHelper.ApplicationPhaseId = i;
        tempHelper.TimeMoved = DateTime.Now;

        await httpClient.PostJsonAsync<ApplicationPhasesHelper>("applicationphasehelper", tempHelper, new AuthenticationHeaderValue("Bearer", token));


        HrEmailModel test = new HrEmailModel();
        test.CandidateName = CurrentItem.Name;
        test.CandidateSurname = CurrentItem.Surname;
        test.AuthorizerEmail = userstate.Email;
        test.Phase = AppPhases.FirstOrDefault(x => x.id == CurrentItem.ApplicationPhaseId).description;
        test.Job = CurrentItem.JobTitle;
        test.DateTime = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");

        await httpClient.PostAsJsonAsync<HrEmailModel>("https://prod-68.westeurope.logic.azure.com:443/workflows/26a113fe926648e795fa4feda3fa611f/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=F5kfz52-z0loxc0VL-CQ8Tdg6DRfMo0xkKACdb22GJA", test);

    }

    public void Confirm(bool Hired)
    {
        CurrentEmailTemplate = "";

        tempReasonId = -1;

        if (Hired)
        {
            SuccessfulDialog = true;
        }
        else
        {
            UnsuccessfulDialog = true;
        }
    }

    public async Task Reject()
    {
        if (tempReasonId != -1)
        {
            CurrentEmailTemplate = ConvertEmail(Unsuccessful.Single(x => x.Id == tempReasonId).EmailTemplate);

            RejectedCandidate temp = new RejectedCandidate();

            temp.ApplicationId = CurrentItem.ApplicationId;
            temp.UnsuccessfulReasonId = tempReasonId;

            await httpClient.PostJsonAsync<RejectedCandidate>("rejectedcandidate", temp, new AuthenticationHeaderValue("Bearer", token));
            RejectedUsers = await httpClient.GetListJsonAsync<List<RejectedCandidate>>("rejectedcandidate", new AuthenticationHeaderValue("Bearer", token));

            await MovePhase(36);
        }

        SuccessfulDialog = false;
        UnsuccessfulDialog = false;
    }

    public string ConvertEmail(string email)
    {
        if (email != "" && email != null)
        {
            email = email.Replace("{firstname}", CurrentItem.Name);
            email = email.Replace("{surname}", CurrentItem.Surname);

            email = email.Replace("{jobtitle}", CurrentItem.JobTitle);

            email = email.Replace("{date}", DateTime.Now.ToString("MMM-dd"));
            email = email.Replace("{time}", DateTime.Now.ToString("HH:mm:ss"));

            email = email.Replace("{sentname}", userstate.Name);
            email = email.Replace("{sentsurname}", userstate.Surname);
            email = email.Replace("{senttitle}", userstate.Title);
        }


        return email;
    }

    public async Task SendEmail()
    {

        if (IsValidEmail(CurrentEmailRecipient))
        {
            EmailInvalidAlert = "";
            EmailInvalid = true;

            EmailModel CurrentEmail = new EmailModel();


            CurrentEmail.CandidateFirstName = CurrentItem.Name;
            CurrentEmail.CandidateLastName = CurrentItem.Surname;
            CurrentEmail.CandidateEmail = CurrentEmailRecipient;
            CurrentEmail.JobName = CurrentItem.JobTitle;
            CurrentEmail.Body = CurrentEmailTemplate;

            EmailSending = true;

            await httpClient.PostAsJsonAsync<EmailModel>("https://prod-228.westeurope.logic.azure.com:443/workflows/420f0efb54134f0492fee22869c92bc6/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=GOWFYTIEtt84SYP1ZNP8ZIhoXJeq7S13FjBoYlAGVzE", CurrentEmail);


            EmailSending = false;
            EmailSent = true;
        }
        else
        {
            EmailInvalid = false;
            EmailInvalidAlert = "invalid-email";
        }
    }

    public bool IsValidEmail(string email)
    {
        var trimmedEmail = email.Trim();

        if (trimmedEmail.EndsWith("."))
        {
            return false;
        }
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }



    //FILTERS

    public IEnumerable<string> mudSelectTitle;
    public IEnumerable<string> mudSelectDepartment;
    public IEnumerable<string> mudSelectLocation;
    public IEnumerable<string> mudSelectDate;

    private void SearchListTitle(IEnumerable<string> value)
    {
        mudSelectTitle = value;
        FilterItems = Items;
        FilterDataHelper();
    }

    private void SearchListDepartment(IEnumerable<string> value)
    {
        mudSelectTitle = value;
        FilterItems = Items;
        FilterDataHelper();
    }

    private void SearchListLocation(IEnumerable<string> value)
    {
        mudSelectTitle = value;
        FilterItems = Items;
        FilterDataHelper();
    }

    private void SearchListDate(IEnumerable<string> value)
    {
        mudSelectTitle = value;
        FilterItems = Items;
        FilterDataHelper();
    }

    private void FilterDataHelper()
    {
        if(mudSelectTitle?.Any()==true)
        {
            var listTitles = FilterItems.Select(x => x.JobTitle).Except(mudSelectTitle).ToList();
            FilterItems = FilterItems.Where(x => !listTitles.Contains(x.JobTitle)).ToList();
        }
    }
}
