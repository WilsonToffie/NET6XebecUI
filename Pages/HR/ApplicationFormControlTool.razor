@page "/applicationformcontroltool"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
@inject UserState _state;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@using XebecPortal.UI.Utils.Handlers;
@using System.Net.Http.Headers;
@using Microsoft.JSInterop;
@inject CreateJobPost TempJob
<head>
</head>
<style>

    .appform-container {
        height: 100%;
        width: 100%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        font-family: opensans-condensed-bold,serif;
    }

    ::-webkit-scrollbar-button:single-button:vertical:decrement {
        border-width: 0 8px 8px 8px;
        border-color: transparent transparent #555555 transparent;
    }

        ::-webkit-scrollbar-button:single-button:vertical:decrement:hover {
            border-color: transparent transparent #777777 transparent;
        }

    /* ::-webkit-scrollbar-button:single-button {
                        background-color: #bbbbbb;
                        display: block;
                        border-style: solid;
                        height: 12px;
                        width: 12px;
                    }*/

    ::-webkit-scrollbar-button:single-button:vertical:increment {
        border-width: 8px 8px 0 8px;
        border-color: #555555 transparent transparent transparent;
    }

    ::-webkit-scrollbar-button:vertical:single-button:increment:hover {
        border-color: #777777 transparent transparent transparent;
    }

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: hidden;
        overflow-x: hidden;
        width: 100%;
        padding: 55px;
    }

    .appform-left-row {
        border-radius: 20px !important;
        height: 6vh;
        color: black;
        font-family: opensans-condensed-bold,serif;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
        padding-right: 5px !important;
    }

    .appform-left-row-selected {
        border-radius: 20px !important;
        min-height: 9vh;
        color: #00bcae;
        font-family: opensans-condensed-bold,sans-serif;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
        padding: 3px 5px;
    }

    .appform-right-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 10px !important;
        min-height: 7vh !important;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 5px !important;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: calc(100% - 10px);
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .collaborators-left-main {
        padding: 10px;
    }

    .question-div {
        display: flex;
        align-items: center;
    }

        .question-div:hover {
            color: black !important;
            height: 6vh !important;
        }

    .seven {
        flex-direction: column;
    }

    .right-list-item-preview {
        min-height: 5rem;
        color: black;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
    }

    .close-item-panel {
        display: flex;
        justify-content: end;
        font-size: 1.5vh;
    }

        .close-item-panel > span {
            border-left: #888888;
            padding: 1px 1vw;
            border-radius: 0 5px 0 0;
            -moz-border-radius-topright: 5px;
        }

            .close-item-panel > span:hover {
                background: red;
                color: white;
                cursor: pointer;
            }

    .preview-item-body {
        padding: 2px 5px;
    }

    .preview-item-description {
        font-size: 2vh;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .preview-item-control {
        display: flex;
        justify-content: space-between;
    }

    .delete-btn:hover {
        background: red;
        color: white !important;
    }

    .delete-btn {
        width: 10px;
        margin-left: 5%;
    }
    /*New Css*/
    .form-container {
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    .inner-form-container {
        width: 75%;
        height: 100%;
        background-color: white;
        margin-right: 15px;
    }

    .form-heading {
        text-align: center;
    }

    .form-subheading {
        color: #004392;
        font-weight: bold;
    }

    .form-main {
        display: flex;
        padding: 10px 20px;
        justify-content: space-between;
        height: 90%;
    }

    .form-right {
        width: 50%;
        height: 95%;
    }

    .form-left {
        width: 45%;
    }

    .summary-section {
        background-color: #00968B;
        width: 25%;
        height: 100%;
        margin-left: 20px;
        font-weight: bold;
        padding: 15px;
        overflow-y: scroll;
    }

    .left-inner {
        display: flex;
        justify-content: space-around;
    }

    .select-heading {
        font-weight: 600;
    }

    .select-form {
        padding: 2px 0px 5px 5px;
        border: solid #00968B;
        border-radius: 5px;
        width: 100%;
    }

    .answer-heading {
        font-weight: 600;
        margin-top: 10px;
    }

    .answer-options {
        width: 100%;
        border: solid #00968B;
        border-width: 0.5px;
        border-radius: 5px;
    }

    .answers-left-table {
        height: 84%;
        overflow-y: scroll;
    }

    .answers-left-main {
        height: 79%;
        width: 90%;
    }

    .nav-btns {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 70%;
        margin-top: 20px;
    }

    .down-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
        margin-left: 20px;
        width: 22%;
    }

        .down-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .summary-heading {
        color: #004392;
        font-weight: bold;
        text-align: center;
        width: 100%;
    }

    .add-question {
        text-align: center;
    }

    .add-question-header {
        display: flex;
        justify-content: space-between;
        align-content: center;
        align-items: center;
    }

    .add-question-heading-text {
        font-family: opensans-condensed-bold;
        font-weight: 800;
        font-size: 1.5em;
        color: #00bcae;
    }

    .add-question-type {
        display: flex;
        justify-content: center;
    }

    .collaborators-left-table {
        overflow-y: scroll;
    }

    .delete-question-header {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 30%;
    }

    .delete-question-body {
        padding: 0 0 0 15%;
    }

    .delete-questions-left-table {
    }

    .questions {
        border-spacing: 30px;
    }

    .summary-preview-item-description {
        font-size: 2vh;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .question-div {
        margin-bottom: 5px;
    }

    .summary-word {
        font-weight: bold;
    }

    .question-list {
        width: 20px;
        text-align: center;
    }

        .question-list:hover {
            cursor: pointer;
            background-color: #FF4D5A;
            color: white;
        }

    .bottom-buttons {
        margin-top: 3vh;
        margin-left: 25% !important;
        position: absolute;
        bottom: 5vh;
    }

    .button-functions {
        margin-top: 3vh;
        height: 5vh;
        width: 10vh;
        border: none;
        border-radius: 1em;
        background-color: rgba(0, 188, 174,1); /*#00bcae;*/
        color: white;
        /*font-family: opensans-bold;*/
        font-weight: 500;
        padding-left: 0.2em;
        padding-right: 0.2em;
    }

        .button-functions:hover {
            background-color: #d35bc9;
        }

        .button-functions:disabled {
            background-color: grey;
        }
</style>

<div class="top-Image-thing">
    <div class="progressed-circle"></div>
    <div class="progressed-circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    @*<div class="circle"></div>
    <div class="circle"></div>*@
</div>
<div class="selected-rod"></div>
<div class="progress-rod" style="width: 50%; left: 40%;"></div>
<div class="NumberDisplay">
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <div>4</div>
    <div>5</div>
    @*<div>6</div>
    <div>7</div>*@
</div>
<div class="TextDisplay">
    <div class="selected-create-a-job-text-page">Create A Job</div>
    <div class="selected-application-form-text">Build Application Form</div>
    <div class="collaboration-text">Select Collaboration</div>
    @*<div class="collaboration-text-part-2">Select Collaboration Part 2</div>*@
    <div class="phases-text">Select Phases</div>
    <div class="post-a-job-text">Post Job</div>
    @*<div class="summary-text">Summary</div>*@
</div>
@if (prevPage == false && nextPage == false)
{

    <div class="create-job-summary">
        <div class="page-title">
            <h1 style="font-size: 38px !important;">Summary</h1>
        </div>

        <div class="summary-container">
            <div class="collaborators-left-table">
                @if (Questions != null)
                {
                    foreach (var formQuestion in FormQuestions)
                    {
                        <div class="right-list-item-preview">
                            @*<div class="btn-close">
                </div>*@
                            <div class="summary-preview-item-body">
                                <div class="summary-preview-item-description">
                                    <p style="margin:0 0 0px;">@formQuestion.question</p>
                                    @*<span @onclick="() => DeleteFormQuestion(formQuestion)">
                        <i class="fas fa-times"></i>
                        </span>*@
                                </div>
                                <div class="preview-item-control">
                                    @{
                                        var placeholder = "Expected answer";
                                    }
                                    @switch (formQuestion.answerTypeId)
                                    {
                                        case 1:
                                            <input type="number" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                            break;
                                        case 2:
                                            <textarea type="text" class="form-input" placeholder="@placeholder" style="width: 100%; resize:none;" @bind="formQuestion.answer"></textarea>
                                            break;
                                        case 3:
                                            <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                            break;
                                        case 4:
                                            <input type="date" id="test" class="form-input" placeholder="@placeholder" style="width: 100%" @onchange="(e) => { formQuestion.answer = e.Value.ToString(); }">
                                            break;
                                        case 5:
                                            <select @bind="formQuestion.answer">
                                                <option value="yes" selected>Yes</option>
                                                <option value="no">No</option>
                                            </select>
                                            break;
                                        <small class="text-muted text-small">(Select expected answer)</small>
                                        case 6:
                                            <input type="file" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                            break;

                                        case 7:
                                            <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <div class="createjob-form-container">
        <div class="page-title" style="text-align:center;">
            <h1 style="font-size: 38px !important;">Question Selection</h1>
        </div>
        <div class="form-main">
            <div class="form-right">

                <div class="options">

                    <select @onchange="AddToForm" class="select-form">
                        <option disabled selected value="0">Select Question</option>
                        @foreach (var question in Questions)
                        {
                            <option> @question.questionDescription</option>

                        }
                    </select>
                </div>

                <div class="answers-left-main">
                    <div class="model-answers-div">
                        <p class="answer-heading">Model Answers</p>
                    </div>
                    <div class="answers-left-table">

                        @if (Questions != null)
                        {
                            foreach (var formQuestion in FormQuestions)
                            {
                                <div class="right-list-item-preview">

                                    <div class="preview-item-body">
                                            @if (FormQuestionsEmptyWrong.Contains(formQuestion.question))
                                            {
                                                <div style="color:red; font-weight:lighter">Please fill in a expected answer</div>
                                            }
                                        <div class="preview-item-description">
                                            <p class="-form-preview-question">
                                                @formQuestion.question
                                            </p>
                                            <span class="btn-close" @onclick="() => DeleteFormQuestion(formQuestion)">
                                                @*<i class="fas fa-times"></i>*@
                                            </span>
                                        </div>
                                        <div class="preview-item-control">
                                            @{
                                                var placeholder = "Expected answer";
                                            }
                                            @switch (formQuestion.answerTypeId)
                                            {
                                                case 1:
                                                    <input type="number" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                                case 2:
                                                    <textarea type="text" class="form-input" placeholder="@placeholder" style="width: 100%; resize:none;" @bind="formQuestion.answer"></textarea>
                                                    break;
                                                case 3:
                                                    <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                                case 4:
                                                    <input type="date" id="test" class="form-input" placeholder="@placeholder" style="width: 100%" @onchange="(e) => { formQuestion.answer = e.Value.ToString(); }">
                                                    break;
                                                case 5:
                                                    <select class="answer-options" @bind="formQuestion.answer">
                                                        <option selected disabled value="">Please select an option</option>
                                                        <option value="yes">Yes</option>
                                                        <option value="no">No</option>
                                                    </select>
                                                    break;
                                                <small class="text-muted text-small">(Select expected answer)</small>
                                                case 6:
                                                    <input type="file" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;

                                                case 7:
                                                    <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="form-left">
                @if (string.Equals("super admin", _state.Role, StringComparison.OrdinalIgnoreCase) || string.Equals("hradmin", _state.Role, StringComparison.OrdinalIgnoreCase))
                {

                    @*@if (!ShowManage)
            {
            <div>
            <button class="btn appform-main-button" @onclick="OpenButtons">Manage Questions</button>
            </div>
            }*@

                    @if (ShowAddDeleteButtons)
                    {

                        <div class="left-inner">
                            <div class="add-btn">
                                <button class="default-button-style" @onclick="OpenAddPopup">Add question</button>
                            </div>
                            <div class="delete-button">
                                <button class="default-button-style" @onclick="OpenDeletePopup">Delete questions</button>
                            </div>

                            @*<div class="delete-button">
                <button class="btn-close" @onclick="ShowmanageButton"></button>
                </div>*@
                        </div>

                    }

                    @if (ShowAddPopup)
                    {
                        <div class="add-question">
                            <div class="add-question-header">
                                <h4 class="add-question-heading-text">Add Question</h4>
                                <button class="btn-close" @onclick="CloseAddPopup"></button>
                            </div>
                            <div class="add-question-body">
                                <textarea @bind="tempQuestion.questionDescription" style="width: 80%; border: 2px solid grey; height: 180px; background-color: white; border-radius: 5px; padding: 2px; resize:none; "></textarea>
                            </div>
                            <div class="add-question-type">
                                <p style="font-weight:600">Answer Type:</p>
                                <select style="height:20px;" @bind="tempType">
                                        <option selected disabled value="">Please select a type</option>
                                    @foreach (var option in Types)
                                    {
                                        <option value="@option.Type">@option.Type</option>
                                    }
                                </select>
                            </div>
                            <div class="add-question-button">
                                <button class="default-button-style" @onclick="AddQuestion" disabled="@submitQuestionPressed">Submit question</button>
                            </div>
                        </div>
                    }
                    @if (ShowDeletePopup)
                    {
                        <div class="delete-question">
                            <div class="delete-question-header">
                                <h4 class="collaborators-heading-text">Delete Questions:</h4>
                                <button class="btn-close" @onclick="CloseDeletePopup"></button>
                            </div>
                            <div class="delete-question-body">
                                <div class="delete-questions-left-table">
                                    <table class="questions">
                                        @if (Questions != null)
                                        {
                                            foreach (var question in Questions)
                                            {

                                                <tr class="questions-div">
                                                    <td class=" appform-text pl-2">@question.questionDescription </td>
                                                    <td class="btn-close" @onclick="() => DeleteQuestion(question)"></td>
                                                </tr>

                                            }
                                        }
                                    </table>
                                </div>
                            </div>
                        </div>
                    }

                }
            </div>
        </div>

        <div class="bottom-buttons">
            <input type="button" value="Prev" class="default-button-style" @onclick="Prev" disabled="@savePressed" />
            <input type="submit" value="Save" class="default-button-style" @onclick="SaveQuestion" disabled="@savePressed" />
            <input type="button" value="Next" class="default-button-style" @onclick="Next" disabled="@savePressed" />
        </div>
    </div>

}
else if (prevPage == true)
{
    <XebecPortal.UI.Pages.HR.CreateAJobForm />
}
else if (nextPage == true)
{
    <XebecPortal.UI.Pages.HR.PhaseControlTool />
}

@code {
    bool prevPage;
    bool nextPage;
    string token;
    public List<FormQuestion> FormQuestions = new();
    public List<string> FormQuestionsEmptyWrong = new();

    public EventCallback<List<FormQuestion>> FormQuestionsChanged { get; set; }


    string tempString = "";
    private int jobId;
    List<CustomQuestion> Questions = new List<CustomQuestion>();

    List<QuestionType> Types = new List<QuestionType>();
    string tempType = String.Empty;
    //temporary
    List<Job> Jobs = null;
    int CurrentJobId = 0;
    string CurrentJobDescription = null;
    bool ShowAddPopup = false;
    bool ShowAddDeleteButtons = true;
    bool ShowDeletePopup = false;
    bool ShowManage = true;
    public CustomQuestion tempQuestion = new CustomQuestion();

    public List<QuestionnaireHrForm> questionnaireHrForms = new List<QuestionnaireHrForm>();

    private bool savePressed = false;
    private bool submitQuestionPressed = false;


    protected override async Task OnInitializedAsync()
    {
        jobId = TempJob.Id;


        prevPage = false;
        nextPage = false;

        token = await localStorage.GetItemAsync<string>("jwt_token");
        if (FormQuestions == null)
            FormQuestions = new();

        Questions = await httpClient.GetListJsonAsync<List<CustomQuestion>>("question", new AuthenticationHeaderValue("Bearer", token));
        Jobs = await httpClient.GetListJsonAsync<List<Job>>("job", new AuthenticationHeaderValue("Bearer", token));
        Types = await httpClient.GetListJsonAsync<List<QuestionType>>("answertype", new AuthenticationHeaderValue("Bearer", token));

        //preload based on jobid
        FormQuestions = await httpClient.GetListJsonAsync<List<FormQuestion>>($"questionnaire/job/{jobId}", new AuthenticationHeaderValue("Bearer", token));
    }

    public async Task AddToForm(ChangeEventArgs e)
    {
        CustomQuestion question = new CustomQuestion();
        question = Questions.FirstOrDefault(x => e.Value.ToString() == x.questionDescription);

        FormQuestion temp = new FormQuestion();
        temp.id = question.Id;
        temp.question = question.questionDescription + " " + tempString;
        temp.answerTypeId = question.answerTypeId;
        temp.jobId = jobId;
        if (!FormQuestions.FindAll(z => z.id == question.Id).Any())
        {
            FormQuestions.Add(temp);
            await FormQuestionsChanged.InvokeAsync(FormQuestions);
        }
    }

    public async Task DeleteQuestion(CustomQuestion q)
    {
        if (q.questionDescription != null)
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this question"))
            {
                var deleteQuestions = await httpClient.DeleteJsonAsync($"question/{q.Id}", new AuthenticationHeaderValue("Bearer", token));
                await OnInitializedAsync();
                if (deleteQuestions.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeAsync<object>("alert", "Question successfully deleted");
                }

            }

        }

    }
    public void OpenButtons()
    {
        ShowAddDeleteButtons = !ShowAddDeleteButtons;
        ShowManage = !ShowManage;

    }
    public void OpenAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowDeletePopup = false;
        ShowAddDeleteButtons = false;
    }

    public void OpenDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddPopup = false;
        ShowAddDeleteButtons = false;
    }

    private void ShowmanageButton()
    {
        ShowAddDeleteButtons = !ShowAddDeleteButtons;
        ShowManage = true;
    }

    public async Task AddQuestion()
    {
        submitQuestionPressed = true;

        if (!String.IsNullOrEmpty(tempQuestion.questionDescription) && !String.IsNullOrEmpty(tempType))
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to add this question?"))
            {
                tempQuestion.answerTypeId = Types.FirstOrDefault(q => q.Type == tempType).Id;
                var addQuestion = await httpClient.PostJsonAsync("question", tempQuestion, new AuthenticationHeaderValue("Bearer", token));
                await OnInitializedAsync();

                if (addQuestion.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeAsync<object>("alert", "Question successfully addded!");

                }

            }

        }
        else
        {
            await JSRuntime.InvokeAsync<object>("alert", "Please enter a question.");
        }

        submitQuestionPressed = false;
    }

    public void CloseAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowAddDeleteButtons = true;
    }

    public void CloseDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddDeleteButtons = true;
    }

    public async Task DeleteFormQuestion(FormQuestion question)
    {
        FormQuestions.RemoveAll(q => q.id == question.id);
        await FormQuestionsChanged.InvokeAsync(FormQuestions);
    }



    private string QuestionCardClass(CustomQuestion question)
    {
        if (FormQuestions.FindAll(q => q.id == question.Id).Any())
            return "appform-left-row-selected";
        return "appform-left-row";
    }
    private void Prev()
    {
        prevPage = true;
    }

    private void Next()
    {
        nextPage = true;
    }

    public async Task SaveQuestion()
    {
        FormQuestionsEmptyWrong.Clear();

        savePressed = true;
        if (FormQuestions != null)
        {
            foreach (var question in FormQuestions)
            {
                QuestionnaireHrForm tempForm = new()
                    {
                        Question = question.question,
                        Answer = question.answer,
                        AnswerTypeId = question.answerTypeId,
                        JobId = jobId
                    };


                if (String.IsNullOrEmpty(question.answer))
                {
                    FormQuestionsEmptyWrong.Add(question.question);
                }

                questionnaireHrForms.Add(tempForm);
            };

            if (FormQuestionsEmptyWrong.Count == 0)
            {
                foreach (var question in questionnaireHrForms)
                {
                    await httpClient.PostJsonAsync<QuestionnaireHrForm>("questionnaire", question, new AuthenticationHeaderValue("Bearer", token));
                }

                await JSRuntime.InvokeAsync<string>("alert", "Questions saved successfully.");

                savePressed = false;
            }
            else
            {
                savePressed = false;
            }

            

        }

    }

}